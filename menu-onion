#!/bin/bash
# shellcheck disable=SC2001,SC2010,SC2016,SC2128,SC2178

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2022 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github: https://github.com/radio24/TorBox
#
# The code in this script is an adaption from the incredible OnionJuggler project.
# Copyright (C) 2022 OnionJuggler developers
# Github: https://github.com/nyxnor/onionjuggler
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file will set up a public .onion site.
#
# SYNTAX
# ./menu-onion [<SELECTION>]
# <SELECTION> will execute one of the routines, which configures
# TorBox to route the data from an internal to an external interface.
#
#
###### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=13
#
# How many lines are only for decoration and spaces?
NO_SPACER=5
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_20=20
MENU_HEIGHT_15=15
# MENU_HEIGHT should not exceed 26
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
TORRC="/etc/tor/torrc"
BAK="/etc/tor/torrc.bak"
TOR_USER="debian-tor"
DATA_DIR_ROOT="/var/lib"
DATA_DIR="${DATA_DIR_ROOT}/tor"
DATA_DIR_OS="${DATA_DIR}/services"
WEBSERVER="nginx"
WEBSITE_DIR="/var/www"
NGINX_DIR="/etc/nginx"
BACKUP_DIR="/home/torbox/backup"
RUNFILE="run/torbox.run"
SELECTION=$1
ENTRY_NUMBERS=0

##############################
######## FUNCTIONS ########

# include lib
.  /home/torbox/torbox/lib/torbox.lib

# This function imports the configuration and makes some preparations
# TOGGLE16 / TOGGLE17 represents the status of the Onion Servcie mode
read_config()
{
  MODE_OS=$(grep "^HiddenServiceDir" ${TORRC})
  if [ -n "$MODE_OS" ]; then
    TOGGLE16="Onion Service ON!"
    TOGGLE16b="ON"
    TOGGLE17b="OFF"
  else
    TOGGLE16="Onion Service OFF!"
    TOGGLE16b="OFF"
    TOGGLE17b="ON"
  fi
}

# This function tests if a onion service exists.
# Syntax test_service_exists <service_name>
# Following variables can be used:
# $ONION_HOSTNAME
test_service_exists()
{
  SERVICE_NAME="${1}"
  ONION_HOSTNAME=$(sudo -u "${TOR_USER}" grep -s ".onion" "${DATA_DIR_OS}/${SERVICE_NAME}/hostname")
  if [ "${ONION_HOSTNAME}" = "" ]; then
    clear
    echo -e "${WHITE}[!] ERROR: Service does not exist: ${SERVICE_NAME}${NOCOLOR}"
    echo " "
    read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
    clear
    exit 1
  fi
}

# This function creates a list of all onione services
# Syntax create_service_list [<only_with_clients>]
# [<only_with_clients>] will provide a list with services that have at least one client
# Following variables can be used:
# $SERVICE_NAME_LIST is a list with the onion service names (can be separate by newlines (/n))
create_service_list()
{
  ONLY_WITH_CLIENTS=$1
  SERVICE_NAME_LIST=$(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}")
  if [ "$ONLY_WITH_CLIENTS" == "only_with_clients" ]; then
    i=0
    for SERVICE_NAME in $SERVICE_NAME_LIST; do
      CLIENT_EXIST="$(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/" | sed "s/\.auth//g")"
      if [ -n "${CLIENT_EXIST}" ]; then
        i=$((i+1))
        ONION_HOSTNAME="$(sudo -u "${TOR_USER}" grep -s ".onion" "${DATA_DIR_OS}/${SERVICE_NAME}/hostname")"
        ONION_HOSTNAME_WITHOUT_ONION=${ONION_HOSTNAME%.onion}
        if [ $i == 1 ]; then SERVICE_LIST="$(printf "%s\n" "${SERVICE_NAME}")"
        else SERVICE_LIST="$(printf "%s\n%s\n" "${SERVICE_LIST}" "${SERVICE_NAME}")"; fi
      fi
    done
    SERVICE_NAME_LIST=${SERVICE_LIST}
  fi
  clear
}

# This function saves the clients names that are inside the <HiddenServiceDir>/authorized_clients/ in list format (CLIENT1,CLIENT2,...)
# Syntax create_client_list [<SERVICE_NAME>]
# Following variables can be used:
# $CLIENT_NAME_LIST is a list with the onion service names (SERV1,SERV2,...)
# $CLIENT_COUNT number of items in the $CLIENT_NAME_LIST
create_client_list()
{
  SERVICE_NAME="${1}"
  CLIENT_COUNT=0
  CLIENT_NAME_LIST="$(printf %s"$(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/")" | sed "s/\.auth//g" | tr "\n" ", ")"
  CLIENT_COUNT="$(printf %s"${CLIENT_NAME_LIST}" | tr -dc "," | wc -c)"
  CLIENT_COUNT=$((CLIENT_COUNT+1))
}

# This function lists the services which shares a folder through nginx
# Syntax create_web_service_list <TFS>
# <TFS> 0 -> only shared folders; 1 -> only TFS; else -> shared folders and TFS
# Following variables can be used:
# WEB_SERVICE_NAME_LIST is a list with the service names which shares a folder through Nginx (SERV1,SERV2,...)
# VIRTPORT_WEB_SERVICE_LIST is a list with shows on which port the folder is shared through Nginx
# WEB_SERVICE_NAME_FOR_MENU is a list which combines the service name with the port number, which is used by the menu

create_web_service_list(){
	TFS="${1}"
	if [ "$TFS" == "0" ]; then WEB_SERVICE_NAME_LIST_WITH_PORT=$(sudo ls ${NGINX_DIR}/sites-enabled/ | grep "\-onion.conf" | sed "s/-onion.conf//g")
	elif [ "$TFS" == "1" ]; then WEB_SERVICE_NAME_LIST_WITH_PORT=$(sudo ls ${NGINX_DIR}/sites-enabled/ | grep "\-onion-filesharing.conf" | sed "s/-onion-filesharing.conf//g")
	else WEB_SERVICE_NAME_LIST_WITH_PORT=$(sudo ls ${NGINX_DIR}/sites-enabled/ | grep "\-onion.conf" | sed "s/-onion.conf//g"; sudo ls ${NGINX_DIR}/sites-enabled/ | grep "\-onion-filesharing.conf" | sed "s/-onion-filesharing.conf//g"); fi
	i=0
	for WEB_SERVICE_NAME in $WEB_SERVICE_NAME_LIST_WITH_PORT; do
		i=$((i+1))
		WEB_SERVICE_NAME=$(rev <<< ${WEB_SERVICE_NAME})
		VIRTPORT_WEB_SERVICE=$(cut -d '-' -f1 <<< ${WEB_SERVICE_NAME} | rev)
		WEB_SERVICE_NAME=$(cut -d '-' -f2- <<< ${WEB_SERVICE_NAME} | rev)
		if [ $i == 1 ]; then
			# % represent a space
			WEB_SERVICE_NAME_FOR_MENU="$(printf "%s\n" "${WEB_SERVICE_NAME}%Port:%$VIRTPORT_WEB_SERVICE")"
			WEB_SERVICE_NAME_LIST="$(printf "%s\n" "${WEB_SERVICE_NAME}")"
			VIRTPORT_WEB_SERVICE_LIST="$(printf "%s\n" "${VIRTPORT_WEB_SERVICE}")"
		else
			WEB_SERVICE_NAME_FOR_MENU="$(printf "%s\n%s\n" "${WEB_SERVICE_NAME_FOR_MENU}" "${WEB_SERVICE_NAME}%Port:%$VIRTPORT_WEB_SERVICE")"
			WEB_SERVICE_NAME_LIST="$(printf "%s\n%s\n" "${WEB_SERVICE_NAME_LIST}" "${WEB_SERVICE_NAME}")"
			VIRTPORT_WEB_SERVICE_LIST="$(printf "%s\n%s\n" "${VIRTPORT_WEB_SERVICE_LIST}" "${VIRTPORT_WEB_SERVICE}")"
		fi
	done
}

# This function checks if a variable is an integer
# Syntax is_integer [<variable_to_check>]
is_integer()
{
 printf %d "${1}" >/dev/null 2>&1 || ERROR="1";
 if [ "$ERROR" == "1" ]; then
   clear
   echo -e "${WHITE}[!] This is not an integer! ${NOCOLOR}"
   echo " "
   read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
   clear
   exit 1
 fi
}

# This function finds the virtual ports on a configured Onion Service
# Syntax find_virtport <service_name>
# Following variables can be used: VIRTPORT, HIDDENSSERVICEPORT
find_virtport()
{
  SERVICE_NAME="${1}"
  HIDDENSSERVICEPORT=""
  VIRTPORT=""
  UNIX_PATH="unix:/var/run/${SERVICE_NAME}-onion"
  HIDDENSSERVICEPORT=$(grep -m 1 "$UNIX_PATH" ${TORRC})
  #Bash specific, but should also work with other shells
  HIDDENSSERVICEPORT=${HIDDENSSERVICEPORT//#}
  VIRTPORT=$(cut -d ' ' -f2 <<< $HIDDENSSERVICEPORT)
}


# This function shows the .onion address and all necessary information to use it.
# Syntax show_onion_address <service_name>
show_onion_address()
{
  SERVICE_NAME="${1}"
  test_service_exists "${SERVICE_NAME}"
  echo ""
  echo -e "${WHITE}Service name    = ${RED}${SERVICE_NAME}${NOCOLOR}"
  echo ""
  qrencode -m 2 -t ANSIUTF8 "${ONION_HOSTNAME}"
  echo ""
  echo -e "${WHITE}Service address = ${RED}${ONION_HOSTNAME}${NOCOLOR}"
  find_virtport "${SERVICE_NAME}"
  echo -e "${WHITE}Virtual port    = ${RED}${VIRTPORT}${NOCOLOR}"
    if sudo grep -qc "^HiddenServiceDir .*/${SERVICE_NAME}$" "${TORRC}"; then
    echo -e "${WHITE}Status          = ${RED}active${NOCOLOR}"
  else
    echo -e "${WHITE}Status          = ${WHITE}inactive${NOCOLOR}"
  fi
  create_client_list "${SERVICE_NAME}"
  echo ""
  echo -e "${WHITE}Client access information${NOCOLOR}"
  if [ ! -z "${CLIENT_NAME_LIST}" ]; then
    echo -e "${WHITE}Clients         = ${RED}${CLIENT_NAME_LIST} (${CLIENT_COUNT})${NOCOLOR}"
    for AUTH in $(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/"); do
      echo -e "${WHITE}File name       : ${RED}${AUTH}${NOCOLOR}"
      echo -e "${WHITE}Content         : ${RED}$(sudo -u "${TOR_USER}" grep "descriptor:x25519:" "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/${AUTH}")${NOCOLOR}"
    done
  else
    echo -e "${RED}If activated, currently, this Onion Service will be ${WHITE}PUBLIC${RED} available.${NOCOLOR}"
    echo "If you want to restrict client's access, you have to control the client access by"
    echo "generating a key pair (menu entry 7), sending the client his private key or"
    echo "registering a client's public key (menu entry 8) if he is providing you with it."
  fi
	# This produces WEB_SERVICE_NAME_LIST with all available shared folder and TFS locations
	create_web_service_list
  echo ""
  echo -e "${WHITE}Shared folder information${NOCOLOR}"
	if [[ ! -z "$WEB_SERVICE_NAME_LIST" && ( -L "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf" || -L "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf" ) ]]; then
		[ -L "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf" ] && SHARED_FOLDER=$(grep "root" "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf" | sed -e 's/^[[:space:]]*//' | cut -d " " -f2 | cut -d  ";" -f1)
		[ -L "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf" ] && SHARED_FOLDER=$(grep "# Path to shared dir" "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf" | sed -e 's/^[[:space:]]*//' | cut -d " " -f2 | cut -d  ";" -f1)
		echo -e "${RED}Shared folder   = ${WHITE}$SHARED_FOLDER${NOCOLOR}"
		echo ""
		if grep -q -c "^TFS-${SERVICE_NAME}" ${RUNFILE}; then echo -e "${WHITE}TFS is configured ${RED}for this service address. You can change that with menu entry 13. If activated, it is accessible${NOCOLOR}"
		else echo -e "${RED}The folder is shared by Nginx. You can change that with menu entry 12. If activated, it is accessible${NOCOLOR}"; fi
			if [ "$VIRTPORT" == "80" ]; then echo -e "${RED}through the service address ${WHITE}${ONION_HOSTNAME}${NOCOLOR}"
			else echo -e "${RED}through the service address ${WHITE}${ONION_HOSTNAME}:${VIRTPORT}${NOCOLOR}"; fi
	else
    echo -e "${RED}Currently, the Onion Service above is ${WHITE}not accessible${NOCOLOR}."
    echo -e "To change that, you have to start sharing a folder or configuring TFS (menu entry 12 or 13)."
  fi
  echo ""
  read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
  clear
}

# This function configures the TFS in the run file and starts TFS.
# Syntax configure_tfs <choice>
# <choice>: from the selection if downloads and/or uploads are allowed
# This function needs the following special variables:
# CHOICE, TFS_PATH, TFS_MESSAGE, SERVICE_NAME
configure_tfs()
{
	allow_ud=0
	if [ ! -z "$CHOICE" ]; then
		mapfile -t CHOICE <<< "$CHOICE"
		for ARGUMENT in "${CHOICE[@]}"; do
			if [ $ARGUMENT = 1 ]; then allow_ud=$((allow_ud+1))
			elif [ $ARGUMENT = 2 ]; then allow_ud=$((allow_ud+2))
			fi
		done
	fi
	# This is necessary to work with special characters in sed
	TFS_PATH_STRING="$(<<< "$TFS_PATH" sed -e 's`[][\\/.*^$]`\\&`g')"
	TFS_MESSAGE_TXT="$(<<< "$TFS_MESSAGE" sed -e 's`[][\\/.*^$]`\\&`g')"
	# Using the Anchor in torbox.run
	REPLACE_STRING=$(grep -m 1 "This will configure the TFS program" ${RUNFILE})
	#This is necessary to work with special characters in sed
	REPLACE_STRING="$(<<< "$REPLACE_STRING" sed -e 's`[][\\/.*^$]`\\&`g')"
	# This will give $ONION_HOSTNAME
	test_service_exists $SERVICE_NAME
	# allow_ud = 0 --> neither up- nor download
	# allow_ud = 1 --> only upload
	# allow_ud = 2 --> only download
	# allow_ud = 3 --> up- and download
	if [ "$allow_ud" == "0" ]; then
		echo -e "${WHITE}[!] NEITHER UP- NOR DOWNLOAD ALLOWED!${NOCOLOR}"
		echo -e "${RED}[+] We will configure TFS for $SERVICE_NAME, anyway.${NOCOLOR}"
		echo -e "${RED}[+] You can change the configuration later with menu entry 2.${NOCOLOR}"
		echo ""
		echo -e "${RED}[+] Configuring TFS...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE_TXT" ]; then TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -m \"$TFS_MESSAGE_TXT\" -od $ONION_HOSTNAME -ad 0 -au 0"
		else TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -od $ONION_HOSTNAME -ad 0 -au 0"
		fi
		sudo sed -E -i "s/# This will configure the TFS program.*/$REPLACE_STRING$TFS_STRING/g" "${RUNFILE}"
		#Start TFS
		echo -e "${RED}[+] Starting TFS (up- and downloading prohibited)...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE" ]; then sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -m "$TFS_MESSAGE" -od $ONION_HOSTNAME -ad 0 -au 0 &
		else sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -od $ONION_HOSTNAME -ad 0 -au 0 &
		fi
	elif [ "$allow_ud" == "1" ]; then
		echo -e "${RED}[+] Configuring TFS...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE_TXT" ]; then TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -m \"$TFS_MESSAGE_TXT\" -od $ONION_HOSTNAME -ad 0 -au 1"
		else TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -od $ONION_HOSTNAME -ad 0 -au 1"
		fi
		sudo sed -E -i "s/# This will configure the TFS program.*/$REPLACE_STRING$TFS_STRING/g" "${RUNFILE}"
		#Start TFS
		echo -e "${RED}[+] Starting TFS (only for uploading)...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE" ]; then sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -m "$TFS_MESSAGE" -od $ONION_HOSTNAME -ad 0 -au 1 &
		else sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -od $ONION_HOSTNAME -ad 0 -au 1 &
		fi
	elif [ "$allow_ud" == "2" ]; then
		echo -e "${RED}[+] Configuring TFS...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE_TXT" ]; then TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -m \"$TFS_MESSAGE_TXT\" -od $ONION_HOSTNAME -ad 1 -au 0"
		else TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -od $ONION_HOSTNAME -ad 1 -au 0"
		fi
		sudo sed -E -i "s/# This will configure the TFS program.*/$REPLACE_STRING$TFS_STRING/g" "${RUNFILE}"
		# Start TFS
		echo -e "${RED}[+] Starting TFS (only for downloading)...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE" ]; then sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -m "$TFS_MESSAGE" -od $ONION_HOSTNAME -ad 1 -au 0 &
		else sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -od $ONION_HOSTNAME -ad 1 -au 0 &
		fi
	elif [ "$allow_ud" == "3" ]; then
		echo -e "${RED}[+] Configuring TFS...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE_TXT" ]; then TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -m \"$TFS_MESSAGE_TXT\" -od $ONION_HOSTNAME -ad 1 -au 1"
		else TFS_STRING="\nTFS-$SERVICE_NAME=lib\/filesharing\/tfs -n $SERVICE_NAME -fp $TFS_PATH_STRING -od $ONION_HOSTNAME -ad 1 -au 1"
		fi
		sudo sed -E -i "s/# This will configure the TFS program.*/$REPLACE_STRING$TFS_STRING/g" "${RUNFILE}"
		#Start TFS
		echo -e "${RED}[+] Starting TFS (only for up- and downloading)...${NOCOLOR}"
		if [ ! -z "$TFS_MESSAGE" ]; then sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -m "$TFS_MESSAGE" -od $ONION_HOSTNAME -ad 1 -au 1 &
		else sudo ./lib/filesharing/tfs -n $SERVICE_NAME -fp $TFS_PATH -od $ONION_HOSTNAME -ad 1 -au 1 &
		fi
	fi
}

# This function stops a certain TFS
# Syntax stopping_tfs <TFS_NAME_LIST>
# <TFS_NAME_LIST>: this is the list of service names which TFS will be stopped
stopping_tfs()
{
	TFS_NAME_LIST=$1
	for TFS_NAME in $TFS_NAME_LIST; do
		echo -e "${RED}[+] Stopping TFS named ${WHITE}${TFS_NAME}${RED} on Onion domain...${NOCOLOR}"
		PID=$(cat lib/filesharing/pid/${TFS_NAME}.pid)
		(sudo kill $PID) &>/dev/null
		sudo sed -E -i "/^TFS-$TFS_NAME=lib\/filesharing\/tfs/d" "${RUNFILE}"
		echo -e "${RED}[+] Removing Nginx configuration...${NOCOLOR}"
		find_virtport "${TFS_NAME}"
		sudo rm "/etc/nginx/sites-enabled/${TFS_NAME}-${VIRTPORT}-onion-filesharing.conf"
		sudo rm "/etc/nginx/sites-available/${TFS_NAME}-${VIRTPORT}-onion-filesharing.conf"
	done
}

# This function checks if an Onion Service is configured and exit when this is not the case
# Syntax error_no_onion_service
error_no_onion_service()
{
	if [ -z "${SERVICE_NAME_LIST}" ]; then
		echo -e "${WHITE}[!] NO ONION SERVICES AVAILABLE!!${NOCOLOR}"
		echo -e "${RED}[+] There are no onion services configured, yet. You have to create them first (menu entry 2).${NOCOLOR}"
		sleep 5
		trap "bash menu-onion; exit 0" EXIT
		exit 1
	fi
}

# This function checks if there is an Onion Service with client authorization and exit when this is not the case
# Syntax error_no_authorization
error_no_authorization()
{
	if [ -z "${SERVICE_NAME_LIST}" ]; then
		echo -e "${WHITE}[!] NO ONION SERVICES WITH CLIENT AUTHORIZATION AVAILABLE!!${NOCOLOR}"
		echo -e "${RED}[+] There are no onion services with client authorization configured, yet.${NOCOLOR}"
		sleep 5
		trap "bash menu-onion; exit 0" EXIT
		exit 1
	fi
}

# This function displays an error message and exit if the Onion domain is already used
# Syntax error_already_used
error_already_used()
{
	echo -e "${WHITE}[!] THE ONION DOMAIN IS ALREADY USED!${NOCOLOR}"
	echo -e "${RED}[+] You cannot use the same Onion domain for two different sharing options!${NOCOLOR}"
	echo -e "${RED}[+] You have to create another Onion domain.${NOCOLOR}"
	echo ""
	read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
	clear
	trap "bash menu-onion; exit 0" EXIT
	exit 1
}


######## PREPARATIONS ########
read_config

###### DISPLAY THE MENU ######
clear

#This is used, if the script is started with an defined menu selection
CHOICE=()
if [ ! -z "$SELECTION" ]; then
  CHOICE=$SELECTION
else
  CHOICE=$(whiptail --cancel-button "Back" --title "TorBox v.0.5.1 - ONION SERVICES" --menu "Choose an option (ESC -> back to the main menu)         ${TOGGLE16}" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
  "==" "=============================================[Informational]===" \
  " 1" "RUN AN ONION SERVICE - READ ME FIRST"  \
  "==" "============================================[Onion Services]==="  \
  " 2" "Toggle Onion Service Mode from $TOGGLE16b to $TOGGLE17b"  \
  " 3" "Create or reactivate an Onion Service"  \
  " 4" "List all Onion Services"  \
  " 5" "Delete or deactivate an Onion Service"  \
  " 6" "Enter the advanced tor configuration editor"  \
  "==" "===================================[Control client's access]==="  \
  " 7" "Generate a new key pair (public and private key) for a client"  \
  " 8" "Register a client with its public key"  \
  " 9" "Edit a client's authorization"  \
  "10" "List all clients for a particular Onion Service"  \
  "11" "Remove a client's authorization"  \
  "==" "=================================================[Share it!]==="  \
  "12" "Start/stop sharing a folder on an Onion domain and list them"  \
	"13" "Start/stop upload or/and download files (TorBox File Sharing)"  \
  "==" "==========================================[Backup & Restore]===" \
  "14" "Backup Onion Services"  \
  "15" "Restore Onion Services" 3>&1 1>&2 2>&3)
fi
exitstatus=$?
# exitstatus == 255 means that the ESC key was pressed
if [ "$exitstatus" == "255" ]; then exit 0; fi

CHOICE=$(echo "$CHOICE" | tr -d ' ')
case "$CHOICE" in

  # Displays the read.me
	1)
    INPUT=$(cat text/help-onion_service-text)
    whiptail --title "TorBox - INFO (scroll down!)" --msgbox --scrolltext "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH
  ;;

  # Toggle Onion Service Mode  ON or OFF
  2)
    if [ -z "$MODE_OS" ]; then
      INPUT=$(cat text/activate-onion_service-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "DON'T CHANGE" --yes-button "ACTIVATE" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
        if grep "#HiddenServiceDir" ${TORRC}; then
					clear
          echo -e "${RED}[+] Activating Onion Service Mode... ${SERVICE_NAME}...${NOCOLOR}"
          (sudo sed -i "s/^#HiddenServiceDir/HiddenServiceDir/g" ${TORRC}) 2> /dev/null
          (sudo sed -i "s/^#HiddenServicePort/HiddenServicePort/g" ${TORRC}) 2> /dev/null
          (sudo sed -i "s/^##HiddenServiceDir/#HiddenServiceDir/g" ${TORRC}) 2> /dev/null
          (sudo sed -i "s/^##HiddenServicePort/#HiddenServicePort/g" ${TORRC}) 2> /dev/null
          if grep "HiddenServiceDir" ${TORRC}; then
						# This produces WEB_SERVICE_NAME_LIST with all available shared folder and TFS locations
						create_web_service_list
            if [ ! -z "$WEB_SERVICE_NAME_LIST" ]; then
							sudo ./run/start_tfs initial
              echo -e "${RED}[+] Found shared folders or/and a TFS configuration... Nginx reloaded to make them available.${NOCOLOR}"
            fi
            echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
            sudo systemctl restart tor
            echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
            echo ""
						read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
						clear
          fi
        else
          trap "bash menu-onion; exit 0" SIGINT
          echo -e "${WHITE}[!] THERE ARE NO ONION SERVICES CONFIGURED!!${NOCOLOR}"
          read -n 1 -s -r -p $'\e[1;31m[+] We will create now an Onion Service for you. If you agree, press ENTER, otherwise press CTR-C. \e[0m'
          clear
          bash menu-onion 3; exit 0
        fi
      fi
    else
      INPUT=$(cat text/deactivate-onion_server-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "DON'T CHANGE" --yes-button "DEACTIVATE" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
        clear
        echo -e "${RED}[+] Deactivating Onion Service Mode...${NOCOLOR}"
        (sudo sed -i "s/^#HiddenServiceDir/##HiddenServiceDir/g" ${TORRC}) 2> /dev/null
        (sudo sed -i "s/^#HiddenServicePort/##HiddenServicePort/g" ${TORRC}) 2> /dev/null
        (sudo sed -i "s/^HiddenServiceDir/#HiddenServiceDir/g" ${TORRC}) 2> /dev/null
        (sudo sed -i "s/^HiddenServicePort/#HiddenServicePort/g" ${TORRC}) 2> /dev/null
				# shellcheck disable=SC2012
				TFS_NAME_LIST=$(ls lib/filesharing/pid/ | sed "s/.pid//")
				if [ ! -z "$TFS_NAME_LIST" ]; then stopping_tfs $TFS_NAME_LIST; fi
				echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
				# shellcheck disable=SC2062
				sudo ls /var/run | grep .*-onion-.*.sock | xargs -I {} -d"\n" sudo rm /var/run/{}
				sleep 5
				sudo systemctl reload nginx
        echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
        sudo systemctl restart tor
        echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
				echo ""
				read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
				clear
      fi
    fi
    read_config
  ;;

  # Create or reactivate an Onion Service
  3)
    INPUT=$(cat text/enable-onion_service-text)
    if (whiptail --title "TorBox - INFO" --scrolltext --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then SELECTION=3; fi
    if [ $SELECTION == 3 ]; then
      SERVICE_NAME=$(whiptail --title "TorBox - INFO" --inputbox "\n\nName your onion service directory in one string and no space (e.g.: torbox.ch):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
			exitstatus=$?
			if [ ! -z "${SERVICE_NAME}" ]; then
				if [ ! "${SERVICE_NAME%%*[^a-z0-9_.]*}" ]; then
					clear
					echo -e "${WHITE}[!] THE SERVICE NAME IS INVALID!!${NOCOLOR}"
					echo -e "${RED}[+] The name can only contain characters in range of: 'a-z', 'A-Z', '_', '.'.${NOCOLOR}"
					sleep 5
					clear
					trap "bash menu-onion; exit 0" EXIT
					exit 1
				fi
        if (grep "^HiddenServiceDir ${DATA_DIR_OS}/${SERVICE_NAME}" "${TORRC}"); then
          clear
          echo -e "${WHITE}[!] THE SERVICE NAME IS ALREADY USED AND ACTIVATED!!${NOCOLOR}"
          echo -e "${RED}[+] If you want to replace the particular Onion Service, you must first delete it with menu entry 4.${NOCOLOR}"
          sleep 5
          clear
          trap "bash menu-onion; exit 0" EXIT
          exit 1
        fi
        if (grep "#HiddenServiceDir ${DATA_DIR_OS}/${SERVICE_NAME}" "${TORRC}"); then
          clear
          INPUT=$(cat text/reactivate-onion_service-text)
          if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
            exitstatus=$?
            if [ "$exitstatus" == "0" ]; then
              clear
              echo -e "${RED}[+] Reactivating ${SERVICE_NAME}...${NOCOLOR}"
              #This is necessary to work with special characters in sed
              DATA_DIR_OS_STRING="$(<<< "${DATA_DIR_OS}" sed -e 's`[][\\/.*^$]`\\&`g')"
              SERVICE_NAME_STRING="$(<<< "${SERVICE_NAME}" sed -e 's`[][\\/.*^$]`\\&`g')"
              sudo sed -i "s/^##HiddenServiceDir/#HiddenServiceDir/g" ${TORRC} 2> /dev/null
              sudo sed -i "s/^##HiddenServicePort/#HiddenServicePort/g" ${TORRC} 2> /dev/null
              sudo sed -i "s/^#HiddenServiceDir ${DATA_DIR_OS_STRING}\/${SERVICE_NAME_STRING}/HiddenServiceDir ${DATA_DIR_OS_STRING}\/${SERVICE_NAME_STRING}/g" ${TORRC} 2> /dev/null
							# This gives VIRTPORT, HIDDENSSERVICEPORT
							find_virtport $SERVICE_NAME
              #This is necessary to work with special characters in sed
              HIDDENSSERVICEPORT_STRING="$(<<< "${HIDDENSSERVICEPORT}" sed -e 's`[][\\/.*^$]`\\&`g')"
              sudo sed -i "s/^#$HIDDENSSERVICEPORT_STRING/$HIDDENSSERVICEPORT_STRING/g" ${TORRC}
							# This produces WEB_SERVICE_NAME_LIST with all available shared folder and TFS locations
							create_web_service_list
              if [ ! -z "$WEB_SERVICE_NAME_LIST" ]; then
								sudo ./run/start_tfs
                echo -e "${RED}[+] Found shared folders or/and a TFS configuration... Nginx reloaded to make them available.${NOCOLOR}"
								sleep 5
								sudo systemctl reload nginx
              fi
              sleep 2
              echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
              sudo systemctl restart tor
              echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
              echo ""
              sleep 2
              clear
              echo -e "${RED}[+] This is the information for your reactivated Onion Service${NOCOLOR}"
              show_onion_address $SERVICE_NAME
              trap "bash menu-onion; exit 0" EXIT
              exit 0
            fi
          else
            clear
            echo -e "${WHITE}[!] THE SERVICE NAME IS ALREADY USED!!${NOCOLOR}"
            echo -e "${RED}[+] If you want to replace the particular Onion Service, you must first delete it with menu entry 4.${NOCOLOR}"
            sleep 5
            clear
            trap "bash menu-onion; exit 0" EXIT
            exit 1
          fi
        fi
        SERVICE_PORTS=$(whiptail --title "Onion Service -- virtual ports" --inputbox "\n\nPlease, configure a virtual port. Usually 80 is just good enough: " $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 80 3>&1 1>&2 2>&3)
				exitstatus=$?
				if [ ! -z "${SERVICE_PORTS}" ]; then
          clear
          echo -e "${RED}[+] Configuring torrc...${NOCOLOR}"
          VIRTPORT=$(cut -d ' ' -f1 <<< $SERVICE_PORTS)
          is_integer "${VIRTPORT}"
					# Using the Anchor in torrc
          REPLACE_STRING=$(grep -m 1 "This will configure the Onion Services" ${TORRC})
					#This is necessary to work with special characters in sed
					REPLACE_STRING="$(<<< "$REPLACE_STRING" sed -e 's`[][\\/.*^$]`\\&`g')"
					UNIX_PATH="unix:/var/run/${SERVICE_NAME}-onion"
          SOCK_FILE="${UNIX_PATH}-${VIRTPORT}.sock"
          #This is necessary to work with special characters in sed
          DATA_DIR_OS_STRING="$(<<< "${DATA_DIR_OS}" sed -e 's`[][\\/.*^$]`\\&`g')"
          SERVICE_NAME_STRING="$(<<< "${SERVICE_NAME}" sed -e 's`[][\\/.*^$]`\\&`g')"
          SOCK_FILE_STRING="$(<<< "${SOCK_FILE}" sed -e 's`[][\\/.*^$]`\\&`g')"
					NEW_STRING="\nHiddenServiceDir $DATA_DIR_OS_STRING\/$SERVICE_NAME_STRING\nHiddenServicePort ${VIRTPORT} $SOCK_FILE_STRING"
          #Writing the necessary entries on the right place in torrc (not at the end, because there are already the bridges)
          sudo sed -E -i "s/## This will configure the Onion Services.*/$REPLACE_STRING$NEW_STRING/g" "${TORRC}"
          #Create a folder, which can be published through the Onion Services
          echo -e "${RED}[+] Creating $WEBSITE_DIR/$SERVICE_NAME which can be shared through the Onion domain.${NOCOLOR}"
          sudo mkdir "$WEBSITE_DIR/$SERVICE_NAME"
					sudo chown torbox:torbox "$WEBSITE_DIR/$SERVICE_NAME"
          echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
          sudo systemctl restart tor
          echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
          sleep 5
          clear
          echo -e "${RED}[+] This is the information for your newly created Onion Service${NOCOLOR}"
          show_onion_address $SERVICE_NAME
        fi
      else
				# exitstatus == 255 means that the ESC key was pressed
				if [ $exitstatus != 255 ]; then
        	clear
        	echo -e "${WHITE}[!] NO SERVICE NAME GIVEN!!${NOCOLOR}"
        	echo -e "${RED}[+] You didn't define a service name! You have to define a service name!${NOCOLOR}"
        	sleep 5
        	clear
        	trap "bash menu-onion; exit 0" EXIT
        	exit 1
				fi
      fi
    fi
  ;;

  # List all Onion Services
  4)
    create_service_list
		error_no_onion_service
    i=0
    for SERVICE_NAME in $(printf %s"${SERVICE_NAME_LIST}" | tr "," " "); do
      i=$((i+1))
      clear
      echo -e "${RED}[+] This is the list of all existing Onion Services on your system; TFS shares included (page $i)${NOCOLOR}"
      show_onion_address $SERVICE_NAME
    done
  ;;

  # Delete or deactivate Onion Service
  5)
    create_service_list
		error_no_onion_service
    INPUT=$(cat text/disable-onion_service-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
      exitstatus=$?
      service_menu checklist "$SERVICE_NAME_LIST"
      if [ "$exitstatus" == "0" ]; then
        i=0
        for SERVICE_NAME in $SERVICE_NAME_LIST; do
          i=$((i+1))
          for SERVICE_NUMBER in $ENTRY_NUMBERS; do
            if [ "$i" = "$SERVICE_NUMBER" ]; then
              INPUT="Would you DEACTIVATE or DELETE the Onion Service named ->$SERVICE_NAME<-?\n\nDEACTIVATE means that nothing will be deleted and the Onion Service can be reactivatet later.\n\nDELETE means that the Onion Service, client authorizations, and the HOSTED DATA IN THE SHARED FOLDER be deleted PERMANENTLY! The service CANNOT be reactivated and the same onion address CANNOT be used anymore.\n"
              if (whiptail --title "TorBox - INFO" --defaultno --no-button "DEACTIVATE" --yes-button "DELETE" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
                exitstatus=$?
              else
                exitstatus=$?
              fi
              clear
							#This is necessary to work with special characters in sed
							DATA_DIR_OS_STRING="$(<<< "${DATA_DIR_OS}" sed -e 's`[][\\/.*^$]`\\&`g')"
							SERVICE_NAME_STRING="$(<<< "${SERVICE_NAME}" sed -e 's`[][\\/.*^$]`\\&`g')"
							UNIX_PATH="unix:/var/run/${SERVICE_NAME}-onion"
              if [ "$exitstatus" == "0" ]; then
                echo -e "${RED}[+] Delete Onion Service named ${WHITE}$SERVICE_NAME${NOCOLOR}"
                (sudo rm -rfv "${DATA_DIR_OS}/${SERVICE_NAME}") &>/dev/null
                sudo sed -i "/HiddenServiceDir ${DATA_DIR_OS_STRING}\/${SERVICE_NAME_STRING}/d" ${TORRC}
								# This gives VIRTPORT, HIDDENSSERVICEPORT
								find_virtport $SERVICE_NAME
                #This is necessary to work with special characters in sed
                HIDDENSSERVICEPORT_STRING="$(<<< "${HIDDENSSERVICEPORT}" sed -e 's`[][\\/.*^$]`\\&`g')"
                sudo sed -i "/$HIDDENSSERVICEPORT_STRING/d" ${TORRC}
								sudo sed -E -i "/^TFS-$SERVICE_NAME=lib\/filesharing\/tfs/d" "${RUNFILE}"
                echo ""
                echo -e "${RED}[+] Delete shared folder $WEBSITE_DIR/$SERVICE_NAME in 5 seconds...${NOCOLOR}"
                echo -e "${WHITE}    Last chance to abbort with CTRL-C!${NOCOLOR}"
                trap "bash menu-onion; exit 0" SIGINT
                sleep 1
                echo -e "1"
                sleep 1
                echo -e "2"
                sleep 1
                echo -e "3"
                sleep 1
                echo -e "4"
                sleep 1
                echo -e "5"
                sleep 1
                echo -e "${RED}[+] Shared folder $WEBSITE_DIR/$SERVICE_NAME is deleted!${NOCOLOR}"
                (sudo rm -r $WEBSITE_DIR/$SERVICE_NAME) &>/dev/null
              elif [ "$exitstatus" == "1" ]; then
                echo -e "${RED}[+] Deactivate Onion Service named ${WHITE}$SERVICE_NAME${NOCOLOR}"
                sudo sed -i "s/^HiddenServiceDir ${DATA_DIR_OS_STRING}\/${SERVICE_NAME_STRING}/#HiddenServiceDir ${DATA_DIR_OS_STRING}\/${SERVICE_NAME_STRING}/g" ${TORRC}
								# This gives VIRTPORT, HIDDENSSERVICEPORT
								find_virtport $SERVICE_NAME
                #This is necessary to work with special characters in sed
                HIDDENSSERVICEPORT_STRING="$(<<< "${HIDDENSSERVICEPORT}" sed -e 's`[][\\/.*^$]`\\&`g')"
                sudo sed -i "s/^$HIDDENSSERVICEPORT_STRING/#$HIDDENSSERVICEPORT_STRING/g" ${TORRC}
              fi
              sleep 2
            fi
          done
        done
        clear
        read_config
        if [ "$TOGGLE16b" == "OFF" ]; then
					echo -e "${RED}[+] There is no Onion Service configured, cleaning up...${NOCOLOR}"
					# The configuration line in the run-files is not deleted. start_tfs and the creation of tfs has to take care of it!!
					# shellcheck disable=SC2012
					TFS_NAME_LIST=$(ls lib/filesharing/pid/ | sed "s/.pid//")
					if [ ! -z "$TFS_NAME_LIST" ]; then stopping_tfs $TFS_NAME_LIST; fi
					echo -e "${RED}[+] Removing Nginx configuration for shared folders...${NOCOLOR}"
					for SERVICE_NAME in $SERVICE_NAME_LIST; do
						find_virtport "${SERVICE_NAME}"
						(sudo rm "/etc/nginx/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf") >/dev/null
						(sudo rm "/etc/nginx/sites-available/${SERVICE_NAME}-${VIRTPORT}-onion.conf") >/dev/null
					done
					# shellcheck disable=SC2062
					sudo ls /var/run | grep .*-onion-.*.sock | xargs -I {} -d"\n" sudo rm /var/run/{}
					sleep 5
					echo -e "${RED}[+] Reloading Nginx...${NOCOLOR}"
					sudo systemctl reload nginx
        fi
        echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
        sudo systemctl restart tor
        echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
				sleep 5
				clear
      fi
    fi
  ;;

  # Enter the advanced configuration editor
  6)
    INPUT=$(cat text/advanced-OS-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "DON'T CHANGE" --yes-button "CHANGE NOW" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
      sudo cp ${TORRC} ${BAK}
      ./vitor
      INPUT=$(cat text/restart-tor-text)
      if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO - DON'T (RE)START" --yes-button "YES - (RE)START" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
        clear
        restarting_tor menu-onion
      fi
    fi
  ;;

  # Generate a new key pair (public and private key) for a client
  # As the onion service operator, make your Onion Service authenticated by generating a pair or public and private keys
  # The client's pub key is automatically saved inside <HiddenServiceDir>/authorized_clients/alice.auth
  # The client's private key is shown in the screen and the key file deleted
  # The onion service operator should send the private key to the desired client
  7)
    create_service_list
		error_no_onion_service
    INPUT=$(cat text/generate-new_key_pair-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      exitstatus=$?
      service_menu checklist "$SERVICE_NAME_LIST"
      if [ "$exitstatus" == "0" ]; then
        i=0
        for SERVICE_NAME in $SERVICE_NAME_LIST; do
          i=$((i+1))
          for SERVICE_NUMBER in $ENTRY_NUMBERS; do
            if [ "$i" = "$SERVICE_NUMBER" ]; then
              CLIENT_NAME_LIST="$(whiptail --title "TorBox - INFO" --inputbox "\n\nType in the client(s) name(s) which you want authorize to acces the onion service(s), delimited by space or/and comma (e.g.: alice, bob, carol):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)"
              CLIENT_NAME_LIST="$(printf %s"${CLIENT_NAME_LIST}" | tr -s ' ' ',' | tr -s ',' ',')"
              if [ -n "${CLIENT_NAME_LIST}" ]; then
                clear
                for CLIENT_NAME in $(printf %s"${CLIENT_NAME_LIST}" | tr "," " "); do
                  test_service_exists "${SERVICE_NAME}"
                  # Generate pem and derive pub and priv keys
                  openssl genpkey -algorithm x25519 -out /tmp/k1.prv.pem
                  # basez has to be installed
                  grep -v " PRIVATE KEY" /tmp/k1.prv.pem | base64pem -d | tail --bytes=32 | base32 | sed "s/=//g" > /tmp/k1.prv.key
                  openssl pkey -in /tmp/k1.prv.pem -pubout | grep -v " PUBLIC KEY" | base64pem -d | tail --bytes=32 | base32 | sed "s/=//g" > /tmp/k1.pub.key
                  ## save variables
                  CLIENT_PUB_KEY=$(cat /tmp/k1.pub.key)
                  CLIENT_PRIV_KEY=$(cat /tmp/k1.prv.key)
                  ONION_HOSTNAME_WITHOUT_ONION=${ONION_HOSTNAME%.onion}
                  CLIENT_PRIV_KEY_CONFIG="${ONION_HOSTNAME_WITHOUT_ONION}:descriptor:x25519:${CLIENT_PRIV_KEY}"
                  CLIENT_PUB_KEY_CONFIG="descriptor:x25519:${CLIENT_PUB_KEY}"
                  # Server side configuration
                  printf %s"${CLIENT_PUB_KEY_CONFIG}\n" | sudo tee "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/${CLIENT_NAME}.auth" >/dev/null
                  echo -e "${RED}[+] Below are the generated keys:${NOCOLOR}"
                  echo ""
                  echo -e "${WHITE}Service name                 = ${RED}${SERVICE_NAME}${NOCOLOR}"
                  echo -e "${WHITE}Client Name                  = ${RED}${CLIENT_NAME}${NOCOLOR}"
                  echo -e "${WHITE}Service address              = ${RED}${ONION_HOSTNAME}${NOCOLOR}"
                  echo -e "${WHITE}Public key (saved)           = ${RED}${CLIENT_PUB_KEY}${NOCOLOR}"
                  echo -e "${WHITE}Public key configuration     = ${RED}${CLIENT_PUB_KEY_CONFIG}${NOCOLOR}"
                  echo -e "${WHITE}Private key (for the client) = ${RED}${CLIENT_PRIV_KEY}${NOCOLOR}"
                  echo -e "${WHITE}Private key configuration    = ${RED}${CLIENT_PRIV_KEY_CONFIG}${NOCOLOR}"
                  echo ""
                  echo -e "${WHITE}Remember:${NOCOLOR} TorBox is now configured with the public key and the client can only access it with the private key."
                  echo -e "          To give him acces, you have to give him his private key. ${WHITE}No key - no access!${NOCOLOR}"
                  echo ""
                  read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
                  clear
                  ## Delete pem and keys
                  (sudo rm -f /tmp/k1.pub.key /tmp/k1.prv.key /tmp/k1.prv.pem) &>/dev/null
                done
              fi
            fi
          done
        done
				clear
				echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
				sudo systemctl restart tor
				echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
				sleep 2
      fi
    fi
  ;;

  # Register the client with its public key
  # The client sends to the onion service operator a public key, which can be register for a Onion Service
  # The onion service operator doesn't have to send to the client anything - the client has the private key already
  8)
    create_service_list
		error_no_onion_service
    INPUT=$(cat text/register-client_public_key-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      exitstatus=$?
      service_menu menu "$SERVICE_NAME_LIST"
      if [ "$exitstatus" == "0" ]; then
        i=0
        for SERVICE_NAME in $SERVICE_NAME_LIST; do
          i=$((i+1))
          for SERVICE_NUMBER in $ENTRY_NUMBERS; do
            if [ "$i" = "$SERVICE_NUMBER" ]; then
              CLIENT_NAME=$(whiptail --title "TorBox - INFO" --inputbox "\n\nType in the client name which you want authorize to acces the onion service (e.g.: alice):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
              exitstatus=$?
              # exitstatus == 255 means that the ESC key was pressed
              if [ "$exitstatus" == "0" ]; then
                CLIENT_PUB_KEY=$(whiptail --title "TorBox - INFO" --inputbox "\n\nType in the client's public key in base32 (for example: BAFYBEICZSSCDSBS7FFQZ55ASQDF3SMV6KLCW3GOFSZVWLYARCI47BGF354):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
                if { [ -n "${SERVICE_NAME}" ] && [ -n "${CLIENT_NAME}" ] && [ -n "${CLIENT_PUB_KEY}" ]; }; then
                  clear
                  test_service_exists "${SERVICE_NAME}"
                  ONION_HOSTNAME_WITHOUT_ONION=${ONION_HOSTNAME%.onion}
                  CLIENT_PUB_KEY_CONFIG="descriptor:x25519:${CLIENT_PUB_KEY}"
                  printf %s"${CLIENT_PUB_KEY_CONFIG}" | sudo tee "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/${CLIENT_NAME}".auth >/dev/null
                  echo -e "${RED}[+] Client's public key is now registered for ${WHITE}$SERVICE_NAME${NOCOLOR}"
                  echo -e "${RED}[+] There is not more to do due the fact that the client has the private key already.${NOCOLOR}"
                  echo ""
                  read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
                  clear
                fi
              fi
            fi
          done
        done
				clear
				echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
				sudo systemctl restart tor
				echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
				sleep 2
      fi
    fi
  ;;

  # Edit a client's authorization
  9)
    create_service_list only_with_clients
		error_no_authorization
    INPUT=$(cat text/edit_clients_authorisation-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
      exitstatus=$?
      service_menu menu "$SERVICE_NAME_LIST"
      if [ "$exitstatus" == "0" ]; then
        i=0
        for SERVICE_NAME in $SERVICE_NAME_LIST; do
          i=$((i+1))
          for SERVICE_NUMBER in $ENTRY_NUMBERS; do
            if [ "$i" = "$SERVICE_NUMBER" ]; then
              n=0
              CLIENT_NAME_LIST=$(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/" | sed "s/\.auth//g")
              for CLIENT_NAME in $CLIENT_NAME_LIST; do
                n=$((n+1))
                if [ $n == 1 ]; then CLIENT_LIST="\"==\" \"===============================================================\""; fi
                CLIENT_LIST="$CLIENT_LIST \"${n}\" \"${CLIENT_NAME} \""
              done
              CLIENT_LIST="$CLIENT_LIST \"==\" \"===============================================================\"";
              clear
              if [ $n -gt 11 ]; then n=11; fi
              WHIPTAIL_LINE="whiptail --nocancel --title \"TorBox - INFO\" --menu --separate-output \"\nChoose with SPACE and then press ENTER (ESC -> go back)\" $((n+10)) 80 $((n+2)) ${CLIENT_LIST} 3>&1 1>&2 2>&3"
              CHOICE_CLIENT=$(eval $WHIPTAIL_LINE)
              exitstatus=$?
              CLIENT_NAME_LIST_NUMBERS=$(printf %s"${CHOICE_CLIENT}")
              if [ "$exitstatus" == "0" ]; then
                n=0
                for CLIENT_NAME in $CLIENT_NAME_LIST; do
                  n=$((n+1))
                  for CLIENT_NUMBER in $CLIENT_NAME_LIST_NUMBERS; do
                    if [ "$n" = "$CLIENT_NUMBER" ]; then
                      sudo nano "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/${CLIENT_NAME}.auth"
                    fi
                  done
                done
              fi
            fi
          done
        done
        clear
        echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
        sudo systemctl restart tor
        echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
        sleep 2
      fi
    fi
  ;;

  # List all clients for a particular Onion Service
  10)
    create_service_list only_with_clients
		error_no_authorization
    service_menu checklist "$SERVICE_NAME_LIST" "\nNot listed services don't have any client authorization."
    exitstatus=$?
    if [ "$exitstatus" == "0" ]; then
      i=0
      for SERVICE_NAME in $SERVICE_NAME_LIST; do
        i=$((i+1))
        for SERVICE_NUMBER in $ENTRY_NUMBERS; do
          if [ "$i" = "$SERVICE_NUMBER" ]; then
            clear
            echo -e "${RED}[+] This are the clients for ${WHITE}$SERVICE_NAME${RED}:${NOCOLOR}"
            echo ""
            create_client_list "${SERVICE_NAME}"
            echo -e "${WHITE}Clients   = ${RED}${CLIENT_NAME_LIST} (${CLIENT_COUNT})${NOCOLOR}"
            FILE_NAME_LIST=$(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/")
            for FILE_NAME in $FILE_NAME_LIST; do
              echo -e "${WHITE}File name = ${RED}${FILE_NAME}${NOCOLOR}"
              CONTENT=$(sudo -u "${TOR_USER}" grep "descriptor:x25519:" "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/${FILE_NAME}")
              echo -e "${WHITE}Content   = ${RED}$CONTENT${NOCOLOR}"
            done
            echo ""
            read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
            clear
          fi
        done
      done
    fi
  ;;

  # Remove a client's authorization
  11)
		# Gives $SERVICE_NAME_LIST
		create_service_list only_with_clients
		error_no_authorization
    INPUT=$(cat text/remove_clients_authorization-text)
    if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
      exitstatus=$?
      service_menu checklist "$SERVICE_NAME_LIST"
      if [ "$exitstatus" == "0" ]; then
        i=0
        for SERVICE_NAME in $SERVICE_NAME_LIST; do
          i=$((i+1))
          for SERVICE_NUMBER in $ENTRY_NUMBERS; do
            if [ "$i" = "$SERVICE_NUMBER" ]; then
              n=0
              CLIENT_NAME_LIST=$(sudo -u "${TOR_USER}" ls "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/" | sed "s/\.auth//g")
              for CLIENT_NAME in $CLIENT_NAME_LIST; do
                n=$((n+1))
                if [ $n == 1 ]; then CLIENT_LIST="\"${n}\" \"${CLIENT_NAME}\" OFF"
              else CLIENT_LIST="$CLIENT_LIST \"${n}\" \"${CLIENT_NAME}\" OFF"; fi
              done
              clear
              if [ $n -gt 11 ]; then n=11; fi
              WHIPTAIL_LINE="whiptail --nocancel --title \"TorBox - INFO\" --checklist --separate-output \"Clients for the Onion Service named $SERVICE_NAME\n\nChoose with SPACE and then press ENTER (ESC -> go back)\" $((n+10)) 80 $n ${CLIENT_LIST} 3>&1 1>&2 2>&3"
              CHOICE_CLIENT=$(eval $WHIPTAIL_LINE)
              exitstatus=$?
              CLIENT_NAME_LIST_NUMBERS=$(printf %s"${CHOICE_CLIENT}")
              if [ "$exitstatus" == "0" ]; then
                n=0
                for CLIENT_NAME in $CLIENT_NAME_LIST; do
                  n=$((n+1))
                  for CLIENT_NUMBER in $CLIENT_NAME_LIST_NUMBERS; do
                    if [ "$n" = "$CLIENT_NUMBER" ]; then
                      (sudo rm -f "${DATA_DIR_OS}/${SERVICE_NAME}/authorized_clients/${CLIENT_NAME}.auth") &>/dev/null
                      echo -e "${RED}[+] Client named ${WHITE}$CLIENT_NAME${RED} has been removed from the Onion Service named ${WHITE}$SERVICE_NAME${NOCOLOR}"
                      sleep 2
                    fi
                  done
                done
                # Show the status of the service after removing the selected authorization(s)
                # This is important to show the user, if the service has to become public
								# This gives VIRTPORT and HIDDENSSERVICEPORT
								find_virtport $SERVICE_NAME
                create_client_list $SERVICE_NAME
                clear
                echo -e "${RED}[+] This is the status of ${WHITE}$SERVICE_NAME${RED} after altering the client aithorization.${NOCOLOR}"
                echo -e "${RED}[+] Be careful - removing all client authorizations makes the service public. Check below!${NOCOLOR}"
                echo ""
                show_onion_address $SERVICE_NAME
              fi
            fi
          done
        done
        clear
        echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
        sudo systemctl restart tor
        echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
        sleep 2
      fi
    fi
  ;;

  # Serve a website folder on onion domain
  12)
  	INPUT=$(cat text/web_server-text)
  	if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
    	create_service_list
		 	error_no_onion_service
     	clear
      CHOICE2=$(whiptail --cancel-button "Back" --title "TorBox v.0.5.1 - Serve a website folder on onion domain" --menu "Choose an option (ESC -> go back)" 13 $MENU_WIDTH 6  \
      "==" "===============================================================" \
      " 1" "Start sharing a folder on an Onion domain"  \
			" 2" "Change the shared folder of a certain Onion domain" \
      " 3" "Stop sharing a folder on an Onion domain"  \
      " 4" "List of all configured shared folders (TFS included)"  \
      "==" "===============================================================" \
			3>&1 1>&2 2>&3)
			exitstatus=$?
			if [ "$exitstatus" == "0" ]; then
      	 CHOICE2=$(echo "$CHOICE2" | tr -d ' ')
      	 case "$CHOICE2" in

         #Start sharing a folder on onion domain
       	 1)
        	clear
        	service_menu menu "$SERVICE_NAME_LIST"
        	if [ "$exitstatus" == "0" ]; then
          	i=0
          	for SERVICE_NAME in $SERVICE_NAME_LIST; do
            	i=$((i+1))
            	for SERVICE_NUMBER in $ENTRY_NUMBERS; do
              	if [ "$i" = "$SERVICE_NUMBER" ]; then
									# This will give ONION_HOSTNAME
              		test_service_exists $SERVICE_NAME
									# This will give VIRTPORT and HIDDENSSERVICEPORT
									find_virtport $SERVICE_NAME
									CHOICE_VIRTPORT=$VIRTPORT
									# Check if the service/port pair is already used
									[ -f "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf" ] && error_already_used
									[ -f "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf" ] && error_already_used
									# Which folder should be shared?
									SUB_FOLDER=$(whiptail --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --inputbox "\nWhich folder inside of $WEBSITE_DIR should be shared? (default is $WEBSITE_DIR/${SERVICE_NAME}, however you can chose another folder, e.g ${SERVICE_NAME}/shared or $WEBSITE_DIR/${SERVICE_NAME}/shared):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
									if grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}" | sed 's|^/var/www/||g'); fi
									if grep "^/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^/" <<< "${SUB_FOLDER}" | sed 's|^/||g'); fi
									clear
									# If the user doesn't write something into the dialogue, the default is valid
									if [[ "$SUB_FOLDER" = "" || "$SUB_FOLDER" = " " ]]; then
										SHARE_PATH="$WEBSITE_DIR/$SERVICE_NAME"
									else
										SHARE_PATH="$WEBSITE_DIR/$SUB_FOLDER"
									fi
									if [ ! -d $SHARE_PATH ]; then
										sudo chown torbox:torbox $WEBSITE_DIR
										sudo -utorbox mkdir -p $SHARE_PATH
									fi
									echo -e "${RED}[+] Sharing the folder ${WHITE}$SHARE_PATH${RED} for the Onion Service named ${WHITE}$SERVICE_NAME${RED} on port ${WHITE}$CHOICE_VIRTPORT${RED}"
									(cp "etc/nginx/sites-available/sample-onion.conf" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf") >/dev/null
									UNIX_PATH="unix:/var/run/${SERVICE_NAME}-onion"
									HIDDENSSERVICEPORT=$(grep -m 1 "$UNIX_PATH" ${TORRC})
									#Bash specific, but should also work with other shells
	               	HIDDENSSERVICEPORT=${HIDDENSSERVICEPORT//#}
	               	TARGET=$(cut -d ' ' -f3 <<< $HIDDENSSERVICEPORT)
	               	sed -i'' "s|TARGET|${TARGET}|g" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf"
	               	sed -i'' "s|ONION_HOSTNAME|${ONION_HOSTNAME}|g" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf"
	               	sed -i'' "s|SERVICE|${SERVICE_NAME}|g" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf"
	               	sed -i'' "s|FOLDER|$SHARE_PATH|" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf"
              		(sudo mv "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf" "/etc/${WEBSERVER}/sites-available/") >/dev/null
              		(sudo ln -sf "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf" ${NGINX_DIR}/sites-enabled/) >/dev/null
									# Check if the shared folder is empty. If this is the case, the splash screen will be copied into the folder
	               	EMPTY_FOLDER=$(ls -A "$SHARE_PATH")
	               	if [ -z "$EMPTY_FOLDER" ]; then
	                 	(sudo cp "etc/nginx/shared-folder/index.html" "$SHARE_PATH") >/dev/null
	                 	(sudo cp "etc/nginx/shared-folder/tb-001-logo.png" "$SHARE_PATH") >/dev/null
	               	fi
									echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
									sleep 5
									sudo systemctl reload nginx
									(sudo rm -f "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion.conf") &>/dev/null
									echo ""
									if [ "$CHOICE_VIRTPORT" == "80" ]; then echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}${NOCOLOR}"; else
										echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}:${CHOICE_VIRTPORT}${NOCOLOR}"
									fi
									echo ""
									read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
									clear
              	fi
            	done
          	done
        	fi
       	;;

				# Change the shared folder of a certain Onion domain
       	2)
					clear
					# This produces WEB_SERVICE_NAME_LIST with all available shared folder and TFS locations
					create_web_service_list 0
					if [ -z $SERVICE_NAME_LIST ]; then
           	echo -e "${WHITE}[!] There are no folders actively shared, yet!${NOCOLOR}"
						echo -e "${RED}[+] Start TFsharing a folder on an Onion domain, first (entry 1) ${NOCOLOR}"
						echo ""
						read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
						clear
					else
						service_menu menu "$SERVICE_NAME_LIST"
						exitstatus=$?
						if [ "$exitstatus" == "0" ]; then
							i=0
							for SERVICE_NAME in $SERVICE_NAME_LIST; do
								i=$((i+1))
								for SERVICE_NUMBER in $ENTRY_NUMBERS; do
									if [ "$i" = "$SERVICE_NUMBER" ]; then
										# This will give VIRTPORT and HIDDENSSERVICEPORT
										find_virtport $SERVICE_NAME
										# Old path
										SHARE_PATH=$(grep "root" "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf" | sed -e 's/^[[:space:]]*//' | cut -d " " -f2 | cut -d ";" -f1)
										# Which folder should be shared?
										SUB_FOLDER=$(whiptail --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --inputbox "\nWhich folder inside of $WEBSITE_DIR should be shared? Currently: $SHARE_PATH\n\nPress enter or specify a new folder:" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
										if grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}" | sed 's|^/var/www/||g'); fi
										if grep "^/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^/" <<< "${SUB_FOLDER}" | sed 's|^/||g'); fi
										clear
										# If the user doesn't write something into the dialogue, the old path is still valid
										if [[ $SUB_FOLDER = "" || $SUB_FOLDER = " " ]]; then
											sleep 1
										else
											SHARE_PATH_OLD=$SHARE_PATH
											SHARE_PATH="$WEBSITE_DIR/$SUB_FOLDER"
										fi
										if [ ! -d $SHARE_PATH ]; then
											sudo chown torbox:torbox $WEBSITE_DIR
											sudo -utorbox mkdir -p $SHARE_PATH
										fi
										if [[ $SUB_FOLDER = "" || $SUB_FOLDER = " " ]]; then
											sleep 1
										else
											#Configure Nginx
											echo ""
											echo -e "${RED}[+] Sharing the folder ${WHITE}$SHARE_PATH${RED} for the Onion Service named ${WHITE}$SERVICE_NAME${RED} on port ${WHITE}$VIRTPORT${RED}"
											sudo rm "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf"
											sudo systemctl reload nginx
											sudo sed -i "s|$SHARE_PATH_OLD|$SHARE_PATH|g" "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${VIRTPORT}-onion.conf"
											(sudo ln -sf "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${VIRTPORT}-onion.conf" ${NGINX_DIR}/sites-enabled/) >/dev/null
											# Check if the shared folder is empty. If this is the case, the splash screen will be copied into the folder
	               			EMPTY_FOLDER=$(ls -A "$SHARE_PATH")
	               			if [ -z "$EMPTY_FOLDER" ]; then
	                 			(sudo cp "etc/nginx/shared-folder/index.html" "$SHARE_PATH") >/dev/null
	                 			(sudo cp "etc/nginx/shared-folder/tb-001-logo.png" "$SHARE_PATH") >/dev/null
	               			fi
										fi
										echo ""
										echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
										sleep 5
										sudo systemctl reload nginx
										(sudo rm -f "/tmp/${SERVICE_NAME}-${VIRTPORT}-onion.conf") &>/dev/null
										echo ""
										# This will give ONION_HOSTNAME
										test_service_exists $SERVICE_NAME
										if [ "$VIRTPORT" == "80" ]; then echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}${NOCOLOR}"; else
											echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}:${VIRTPORT}${NOCOLOR}"
										fi
										echo ""
										read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
										clear
									fi
								done
							done
						fi
					fi
				;;

       	# Stop sharing folder on onion domain
       	3)
         	clear
					# This produces WEB_SERVICE_NAME_LIST with all available shared folder and TFS locations
         	create_web_service_list 0
					if [ -z $SERVICE_NAME_LIST ]; then
						echo -e "${WHITE}[!] There are no folders actively shared, yet!${NOCOLOR}"
						echo -e "${RED}[+] Start TFsharing a folder on an Onion domain, first (entry 1) ${NOCOLOR}"
						echo ""
						read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
						clear
					else
         		service_menu checklist "$WEB_SERVICE_NAME_FOR_MENU"
         		if [ "$exitstatus" == "0" ]; then
           		if [ ! -z "$WEB_SERVICE_NAME_LIST" ]; then
             		i=0
             		for SERVICE_NAME in $WEB_SERVICE_NAME_LIST; do
               		i=$((i+1))
               		for SERVICE_NUMBER in $ENTRY_NUMBERS; do
                 		if [ "$i" = "$SERVICE_NUMBER" ]; then
											x=0
											for VIRTPORT_WEB_SERVICE in $VIRTPORT_WEB_SERVICE_LIST; do
												x=$((x+1))
												if [ "$x" = "$i" ]; then
                   				echo -e "${RED}[+] Stopping sharing the folder ${WHITE}$WEBSITE_DIR/$SERVICE_NAME${RED} for the Onion Service named ${WHITE}$SERVICE_NAME${RED} on port ${WHITE}$VIRTPORT_WEB_SERVICE${NOCOLOR}."
                   				sudo rm -f "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT_WEB_SERVICE}-onion.conf"
                   				sudo rm -f "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${VIRTPORT_WEB_SERVICE}-onion.conf"
												fi
											done
                 		fi
               		done
             		done
								# This produces WEB_SERVICE_NAME_LIST with all available shared folder and TFS locations
								create_web_service_list
             		if [ -z "$WEB_SERVICE_NAME_LIST" ]; then
               		echo ""
               		echo -e "${RED}There are no shared folder configured; cleaning...${RED}$WEBSITE_DIR/$SERVICE_NAME${NOCOLOR}"
									sleep 5
									echo -e "${RED}[+] Reloading Nginx..."
									sudo systemctl reload nginx
             		else
               		echo ""
               		echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
									sleep 5
									sudo systemctl reload nginx
               		echo ""
               		read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
             		fi
           		fi
         		fi
         	fi
       	;;

       	#List of actively shared folders
       	4)
         	clear
					# This produces WEB_SERVICE_NAME_LIST
					create_web_service_list 0
					if [ -z $SERVICE_NAME_LIST ]; then
						echo -e "${WHITE}[!] There are no folders actively shared, yet!${NOCOLOR}"
						echo -e "${RED}[+] Start TFsharing a folder on an Onion domain, first (entry 1) ${NOCOLOR}"
						echo ""
						read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
						clear
					else
           	i=0;
           	for WEB_SERVICE_NAME in $WEB_SERVICE_NAME_LIST; do
             	i=$((i+1))
             	echo -e "${WHITE}[+] This is the list of configured shared folders (page $i):${NOCOLOR}"
             	show_onion_address $WEB_SERVICE_NAME
           	done
         	fi
       	;;
     	esac
		fi
 	fi
	;;

	# Start/stop upload or/and download files (TorBox File Sharing)
	13)
		INPUT=$(cat text/tfs-text)
		if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
			create_service_list
			error_no_onion_service
			clear
			CHOICE=$(whiptail --cancel-button "Back" --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --menu "Choose an option (ESC -> go back)" 13 $MENU_WIDTH 6 \
			"==" "===============================================================" \
			" 1" "Restart or Start TFS on Onion domains" \
			" 2" "Change the configuration of a certain TFS" \
			" 3" "Stop TFS on an Onion domain" \
			" 4" "List all Onion domains with TFS" \
			"==" "===============================================================" \
			3>&1 1>&2 2>&3)
			exitstatus=$?
			if [ "$exitstatus" == "0" ]; then
				CHOICE=$(echo "$CHOICE" | tr -d ' ')
				case "$CHOICE" in

					# Restart or Start TFS on Onion domains
					1)
						clear
						# Restart
						sudo ./run/start_tfs

						# Start new
						service_menu menu "$SERVICE_NAME_LIST"
						if [ "$exitstatus" == "0" ]; then
							i=0
							for SERVICE_NAME in $SERVICE_NAME_LIST; do
								i=$((i+1))
								for SERVICE_NUMBER in $ENTRY_NUMBERS; do
									if [ "$i" = "$SERVICE_NUMBER" ]; then
										# This will give ONION_HOSTNAME
										test_service_exists $SERVICE_NAME
										# This will give VIRTPORT and HIDDENSSERVICEPORT
										find_virtport $SERVICE_NAME
										CHOICE_VIRTPORT=$VIRTPORT
										# Check if the service/port pair is already used
										[ -f "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion.conf" ] && error_already_used
										if grep -c "^TFS-${SERVICE_NAME}" "${RUNFILE}" && test -f "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf"; then error_already_used; fi
										# Where should the files be stored?
										SUB_FOLDER=$(whiptail --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --inputbox "\nWhere inside of $WEBSITE_DIR do you want store the shared files for TFS? (default is $WEBSITE_DIR/${SERVICE_NAME}, however you can chose another folder, e.g ${SERVICE_NAME}/tfsfolder or $WEBSITE_DIR/${SERVICE_NAME}/tfsfolder):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
										if grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}" | sed 's|^/var/www/||g'); fi
										if grep "^/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^/" <<< "${SUB_FOLDER}" | sed 's|^/||g'); fi
										clear
										# If the user doesn't write something into the dialogue, the default is valid
										if [[ "$SUB_FOLDER" = "" || "$SUB_FOLDER" = " " ]]; then
											TFS_PATH="$WEBSITE_DIR/$SERVICE_NAME"
										else
											TFS_PATH="$WEBSITE_DIR/$SUB_FOLDER"
										fi
										if [ ! -d $TFS_PATH ]; then
											sudo chown torbox:torbox $WEBSITE_DIR
											sudo -utorbox mkdir -p $TFS_PATH
										fi
										##### DISPLAY THE AVAILABLE OPTIONS ######
						      	CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --checklist --separate-output "Choose if you want to allow uploading or/and downloading:" $MENU_HEIGHT_15 $MENU_WIDTH 2 \
						     		" 1" "Allow uploading" ON \
						     		" 2" "Allow downloading" ON \
						     		3>&1 1>&2 2>&3)
										clear
										CHOICE=$(echo "$CHOICE" | tr -d ' ')
										TFS_MESSAGE=$(whiptail --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --inputbox "\nOptionally, a message can be displayed below the \"TorBox File Sharing\" logo. What should that message say? (empty means nothing; \"newline\" can be used):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
					      		configure_tfs
										#Configure Nginx
										echo ""
										echo -e "${RED}[+] Sharing the folder ${WHITE}$TFS_PATH${RED} for the Onion Service named ${WHITE}$SERVICE_NAME${RED} on port ${WHITE}$CHOICE_VIRTPORT${RED}"
										(cp "etc/nginx/sites-available/sample-onion-filesharing.conf" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf") >/dev/null
										UNIX_PATH="unix:/var/run/${SERVICE_NAME}-onion"
										HIDDENSSERVICEPORT=$(grep -m 1 "$UNIX_PATH" ${TORRC})
										#Bash specific, but should also work with other shells
										HIDDENSSERVICEPORT=${HIDDENSSERVICEPORT//#}
										TARGET=$(cut -d ' ' -f3 <<< $HIDDENSSERVICEPORT)
										sed -i'' "s|TARGET|${TARGET}|g" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf"
										sed -i'' "s|ONION_HOSTNAME|${ONION_HOSTNAME}|g" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf"
										sed -i'' "s|SERVICE|${SERVICE_NAME}|g" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf"
										sed -i'' "s|FOLDER|$TFS_PATH|" "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf"
										(sudo mv "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf" "/etc/${WEBSERVER}/sites-available/") >/dev/null
										(sudo ln -sf "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf" ${NGINX_DIR}/sites-enabled/) >/dev/null
										echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
										sleep 5
										sudo systemctl reload nginx
										(sudo rm -f "/tmp/${SERVICE_NAME}-${CHOICE_VIRTPORT}-onion-filesharing.conf") &>/dev/null
										echo ""
										if [ "$CHOICE_VIRTPORT" == "80" ]; then echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}${NOCOLOR}"; else
											echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}:${CHOICE_VIRTPORT}${NOCOLOR}"
										fi
										echo ""
										read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
										clear
									fi
								done
							done
						fi
					;;

					#Change the configuration of a certain TFS
					2)
						clear
						SERVICE_NAME_LIST=$(grep "^TFS-" ${RUNFILE} | sed "s/^TFS-//" | cut -d "=" -f1)
						if [ -z $SERVICE_NAME_LIST ]; then
							echo -e "${WHITE}[!] There is no TFS started on an Onion domain, yet!${NOCOLOR}"
							echo -e "${RED}[+] Start TFS on an Onion domain, first (entry 1) ${NOCOLOR}"
							echo ""
							read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
							clear
						else
							TFS_CONFIG_LIST=$(grep "^TFS-" ${RUNFILE} | cut -d "=" -f2- | sed "s|lib/filesharing/tfs ||")
							service_menu menu "$SERVICE_NAME_LIST"
							exitstatus=$?
							if [ "$exitstatus" == "0" ]; then
								i=0
								for SERVICE_NAME in $SERVICE_NAME_LIST; do
									i=$((i+1))
									for SERVICE_NUMBER in $ENTRY_NUMBERS; do
										if [ "$i" = "$SERVICE_NUMBER" ]; then
											# Creating an array on an easy way
											# shellcheck disable=SC2207
											TFS_CONFIG_LIST_ARRAY=($(echo "$TFS_CONFIG_LIST" | tr " " "\n"))
											#	Distribute the elemwnts of the config line to variables
											TFS_PATH="${TFS_CONFIG_LIST_ARRAY[1]}"
											SUB_FOLDER=$(whiptail --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --inputbox "\nWhere inside of $WEBSITE_DIR do you want store the shared files for TFS? Currently: $TFS_PATH\n\nPress enter or specify a new folder:" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
											if grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^$WEBSITE_DIR/" <<< "${SUB_FOLDER}" | sed 's|^/var/www/||g'); fi
											if grep "^/" <<< "${SUB_FOLDER}"; then SUB_FOLDER=$(grep "^/" <<< "${SUB_FOLDER}" | sed 's|^/||g'); fi
											clear
											# If the user doesn't write something into the dialogue, the old path is still valid
											if [[ $SUB_FOLDER = "" || $SUB_FOLDER = " " ]]; then
												sleep 1
											else
												TFS_PATH_OLD=$TFS_PATH
												TFS_PATH="$WEBSITE_DIR/$SUB_FOLDER"
											fi
											if [ ! -d $TFS_PATH ]; then
												sudo chown torbox:torbox $WEBSITE_DIR
												sudo -utorbox mkdir -p $TFS_PATH
											fi
											##### DISPLAY THE AVAILABLE OPTIONS ######
											if grep "\-ad 0 \-au 0" <<< "$TFS_CONFIG_LIST"; then
												CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --checklist --separate-output "Choose if you want to allow uploading or/and downloading:" $MENU_HEIGHT_20 $MENU_WIDTH 2 \
												" 1" "Allow uploading" OFF \
												" 2" "Allow downloading" OFF \
												3>&1 1>&2 2>&3)
											elif grep "\-ad 0 \-au 1" <<< "$TFS_CONFIG_LIST"; then
												CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --checklist --separate-output "Choose if you want to allow uploading or/and downloading:" $MENU_HEIGHT_20 $MENU_WIDTH 2 \
												" 1" "Allow uploading" ON \
												" 2" "Allow downloading" OFF \
												3>&1 1>&2 2>&3)
											elif grep "\-ad 1 \-au 0" <<< "$TFS_CONFIG_LIST"; then
												CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --checklist --separate-output "Choose if you want to allow uploading or/and downloading:" $MENU_HEIGHT_20 $MENU_WIDTH 2 \
												" 1" "Allow uploading" OFF \
												" 2" "Allow downloading" ON \
												3>&1 1>&2 2>&3)
											elif grep "\-ad 1 \-au 1" <<< "$TFS_CONFIG_LIST"; then
												CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --checklist --separate-output "Choose if you want to allow uploading or/and downloading:" $MENU_HEIGHT_20 $MENU_WIDTH 2 \
												" 1" "Allow uploading" ON \
												" 2" "Allow downloading" ON \
												3>&1 1>&2 2>&3)
											fi
											TFS_MESSAGE=$(whiptail --title "TorBox v.0.5.1 - TorBox's File Sharing capabilities" --inputbox "\nOptionally, a message can be displayed below the \"TorBox File Sharing\" logo. What should that message say? (empty means nothing; \"newline\" can be used):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
											sudo sed -E -i "/^TFS-$SERVICE_NAME=lib\/filesharing\/tfs/d" "${RUNFILE}"
											clear
											if [ -f "lib/filesharing/pid/$SERVICE_NAME.pid" ]; then
												echo -e "${RED}[+] Stopping TFS named $SERVICE_NAME on Onion domain...${NOCOLOR}"
												stopping_tfs $SERVICE_NAME
											fi
											configure_tfs
											if [[ $SUB_FOLDER = "" || $SUB_FOLDER = " " ]]; then
												sleep 1
											else
												# This will give VIRTPORT and HIDDENSSERVICEPORT
												find_virtport $SERVICE_NAME
												#Configure Nginx
												echo ""
												echo -e "${RED}[+] Sharing the new folder ${WHITE}$TFS_PATH${RED} for the Onion Service named ${WHITE}$SERVICE_NAME${RED} on port ${WHITE}$VIRTPORT${RED}"
												sudo rm "${NGINX_DIR}/sites-enabled/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf"
												sudo systemctl reload nginx
												sudo sed -i "s|$TFS_PATH_OLD|$TFS_PATH|g" "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf"
												(sudo ln -sf "${NGINX_DIR}/sites-available/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf" ${NGINX_DIR}/sites-enabled/) >/dev/null
											fi
											echo ""
											echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
											sleep 5
											sudo systemctl reload nginx
											(sudo rm -f "/tmp/${SERVICE_NAME}-${VIRTPORT}-onion-filesharing.conf") &>/dev/null
											echo ""
											# This will give ONION_HOSTNAME
											test_service_exists $SERVICE_NAME
											if [ "$VIRTPORT" == "80" ]; then echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}${NOCOLOR}"; else
												echo -e "${WHITE}Service address (http) = ${RED}${ONION_HOSTNAME}:${VIRTPORT}${NOCOLOR}"
											fi
											echo ""
											read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
											clear
										fi
									done
								done
							fi
						fi
					;;

					#Stop TFS on Onion domain (this has to be change if TFS supports multiple instances)
					3)
						if ! pgrep -f "filesharing.wsgi"; then
							clear
							echo -e "${WHITE}[!] TORBOX FILESHARING (TFS) IS NOT RUNNING!!!${NOCOLOR}"
							sleep 5
							trap "bash menu-onion; exit 0" EXIT
							exit 1
						else
							clear
							# shellcheck disable=SC2012
							SERVICE_NAME_LIST=$(ls lib/filesharing/pid/ | sed "s/.pid//")
							service_menu checklist "$SERVICE_NAME_LIST"
	         		if [ "$exitstatus" == "0" ]; then
	           		if [ ! -z "$SERVICE_NAME_LIST" ]; then
	             		i=0
	             		for SERVICE_NAME in $SERVICE_NAME_LIST; do
	               		i=$((i+1))
	               		for SERVICE_NUMBER in $ENTRY_NUMBERS; do
	                 		if [ "$i" = "$SERVICE_NUMBER" ]; then
												stopping_tfs $SERVICE_NAME
												echo ""
											fi
	               		done
	             		done
								fi
							fi
							echo -e "${RED}[+] Cleaning...${NOCOLOR}"
							sleep 5
							echo -e "${RED}[+] Reloading Nginx...${NOCOLOR}"
							sudo systemctl reload nginx
							echo ""
							read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
           	fi
					;;

					#List all Onion domains with TFS
					4)
						if ! pgrep -f "filesharing.wsgi"; then
							clear
							echo -e "${WHITE}[!] TORBOX FILESHARING (TFS) IS NOT RUNNING!!!${NOCOLOR}"
							sleep 5
							trap "bash menu-onion; exit 0" EXIT
							exit 1
						fi
						clear
						SERVICE_NAME_LIST=$(grep "^TFS-" ${RUNFILE} | sed "s/^TFS-//" | cut -d "=" -f1)
						if [ ! -z "$SERVICE_NAME_LIST" ]; then
							i=0;
							for SERVICE_NAME in $SERVICE_NAME_LIST; do
								i=$((i+1))
								echo -e "${WHITE}[+] This is the information about the running TFS:${NOCOLOR}"
								show_onion_address $SERVICE_NAME
							done
						else
							clear
							echo -e "${WHITE}[!] NO FOLDERS ARE ACTIVELY SHARED!!${NOCOLOR}"
							sleep 5
						fi
					;;
				esac
			fi
		fi
	;;

  # Backup Onion Services (it doesn't backup my access permissions from the menu-defender entry 5!! )
  # Backups the torrc configuration, the Onion Services, the client keys, and optionally the nginx configuration and all shared folders
  14)
    clear
		create_service_list
		error_no_onion_service
    INPUT=$(cat text/backup-onion_service-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --no-button "NO" --yes-button "YES" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      exitstatus=$?
      if [ "$exitstatus" == "0" ]; then
        if [ ! -d "$BACKUP_DIR" ]; then
          mkdir $BACKUP_DIR
        fi
        OS_BK_TAR="$BACKUP_DIR/torbox_onion_service-$(date +%Y-%m-%d-%H'h'-%M'm').tgz"
        if (whiptail --title "TorBox - INFO" --no-button "NO" --yes-button "YES" --yesno "Do you want to include Nginx's and TFS' configuration and all shared folders into your backup?" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
          echo -e "${RED}[+] Backup Onion Service configuration WITH Nginx's and TFS configuration and all shared folders to ${WHITE}$OS_BK_TAR${NOCOLOR}"
          echo ""
          # Checking if we have anough space
          NEEDED_SIZE=$(sudo tar -cz "${DATA_DIR_OS}" "${TORRC}" "${NGINX_DIR}" "${WEBSITE_DIR}" "${RUNFILE}" | wc -c)
          AVAILABLE_SIZE=$(df -a | grep "$BACKUP_DIR" | awk '{print $4}')
          if [ -z "$AVAILABLE_SIZE" ]; then AVAILABLE_SIZE=$(df -k / | tail -1 | awk '{print $4}'); fi
          AVAILABLE_SIZE=$((AVAILABLE_SIZE*1024))
          if [ $NEEDED_SIZE -lt $AVAILABLE_SIZE ]; then
            (sudo tar -cpvzf "$OS_BK_TAR" "${DATA_DIR_OS}" "${NGINX_DIR}" "${TORRC}" "${WEBSITE_DIR}" "${RUNFILE}") >/dev/null
            LINK_EXIST=$(ls -L "$BACKUP_DIR/shared_folders")
            if [ -z "$LINK_EXIST" ]; then
              echo -e "${RED}[+] Creating a link to the shared folders.${NOCOLOR}"
              (sudo ln -sf "${WEBSITE_DIR}" "${BACKUP_DIR}/shared_folders") >/dev/null
            fi
            clear
            echo -e "${RED}[+] Backup Onion Service configuration WITH Nginx's and TFS configuration and all shared folders to ${WHITE}$OS_BK_TAR${NOCOLOR}"
            echo -e "${RED}[+] Done!${NOCOLOR}"
            echo " "
            read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
          else
            clear
            echo -e "${WHITE}[!] ABORT! NOT ENOUGH SPACE!${NOCOLOR}"
            echo -e "${WHITE}[+] Please, try again without shared folders.${NOCOLOR}"
            echo " "
            read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
            clear
            trap "bash menu-onion; exit 0" EXIT
            exit 1
          fi
        else
          echo -e "${RED}[+] Backup Onion Service configuration WITHOUT Nginx's and TFS configuration and shared folders to ${WHITE}$OS_BK_TAR${NOCOLOR}"
          echo ""
          # Checking if we have anough space
          NEEDED_SIZE=$(sudo tar -cz "${DATA_DIR_OS}" "${TORRC}" | wc -c)
          AVAILABLE_SIZE=$(df -a | grep "$BACKUP_DIR" | awk '{print $4}')
          if [ -z "$AVAILABLE_SIZE" ]; then AVAILABLE_SIZE=$(df -k / | tail -1 | awk '{print $4}'); fi
          AVAILABLE_SIZE=$((AVAILABLE_SIZE*1024))
          if [ $NEEDED_SIZE -lt $AVAILABLE_SIZE ]; then
            (sudo tar -cpvzf "$OS_BK_TAR" "${DATA_DIR_OS}" "${TORRC}") >/dev/null
            LINK_EXIST=$(ls -L "$BACKUP_DIR/shared_folders")
            if [ -z "$LINK_EXIST" ]; then
              echo -e "${RED}[+] Creating a link to the shared folders.${NOCOLOR}"
              (sudo ln -sf "${WEBSITE_DIR}" "${BACKUP_DIR}/shared_folders") >/dev/null
            fi
            clear
            echo -e "${RED}[+] Backup Onion Service configuration WITHOUT Nginx's and TFS configuration and shared folders to  ${WHITE}$OS_BK_TAR${NOCOLOR}"
            echo -e "${RED}[+] Done!${NOCOLOR}"
            echo " "
            read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
          else
            clear
            echo -e "${WHITE}[!] ABORT! NOT ENOUGH SPACE!${NOCOLOR}"
            echo " "
            read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
            clear
            trap "bash menu-onion; exit 0" EXIT
            exit 1
          fi
        fi
      fi
    fi
  ;;

  # Restore Onion Services
  # Backup tar file will be extracted and integrated into their respective tor folders
  15)
    INPUT=$(cat text/restore-onion_service-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --defaultno --no-button "NO" --yes-button "YES" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      exitstatus=$?
      if [ "$exitstatus" == "0" ]; then
        OS_BK_TAR=$(whiptail --title "What is the name of your backup file?" --inputbox "\n\nEnter the name of your backup file (for example: torbox_onion_service-2021-11-20-22h-34m.tgz; blank = abort):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
        cd
        if [ -e "$OS_BK_TAR" ]; then
          NEEDED_SIZE=$(tar -tzvf $OS_BK_TAR | sed 's/ \+/ /g' | cut -f3 -d' ' | sed '2,$s/^/+ /' | paste -sd' ' | bc)
          AVAILABLE_SIZE=$(df -a | grep "$WEBSITE_DIR" | awk '{print $4}')
          if [ -z "$AVAILABLE_SIZE" ]; then AVAILABLE_SIZE=$(df -k / | tail -1 | awk '{print $4}'); fi
          AVAILABLE_SIZE=$((AVAILABLE_SIZE*1024))
          if [ $NEEDED_SIZE -lt $AVAILABLE_SIZE ]; then
            clear
            echo -e "${RED}[+] Unpacking backup file ${OS_BK_TAR}${NOCOLOR}"
            if [ -d "restore.tbx" ]; then
              sudo rm -r restore.tbx
            fi
            (sudo mkdir restore.tbx) 2> /dev/null
            (sudo tar -xpzf $OS_BK_TAR -C restore.tbx) 2> /dev/null
            echo -e "${RED}[+] Removing old Onion Service data${NOCOLOR}"
            (sudo rm -r /var/lib/tor/services) 2> /dev/null
            echo -e "${RED}[+] Removing old Onion Service configuration${NOCOLOR}"
            sudo sed -i "/HiddenServiceDir/d" ${TORRC}
            sudo sed -i "/HiddenServicePort/d" ${TORRC}
            echo -e "${RED}[+] Moving Onion Service keys to their places${NOCOLOR}"
            sudo mv restore.tbx${DATA_DIR_OS} /var/lib/tor/
            echo -e "${RED}[+] Moving configuration...${NOCOLOR}"
            REPLACE_STRING=$(grep -m 1 "This will configure the Onion Services" ${TORRC})
						#This is necessary to work with special characters in sed
						REPLACE_STRING="$(<<< "$REPLACE_STRING" sed -e 's`[][\\/.*^$]`\\&`g')"
            mapfile -t TORRC_ALL_LINES < <( sudo grep "HiddenService" "restore.tbx/${TORRC}" | tac )
            for TORRC_LINE in "${TORRC_ALL_LINES[@]}"; do
							#This is necessary to work with special characters in sed
              TORRC_LINE_STRING="$(<<< "${TORRC_LINE}" sed -e 's`[][\\/.*^$]`\\&`g')"
              sudo sed -E -i "s/## This will configure the Onion Services.*/$REPLACE_STRING\n$TORRC_LINE_STRING/g" "${TORRC}"
            done
            if [ -e "restore.tbx${WEBSITE_DIR}" ]; then
              if (whiptail --title "TorBox - INFO" --defaultno --no-button "NO" --yes-button "YES" --yesno "Shared folder detected! Do you want to restore shared folders and Nginx's and/or TFS' configuration?\n\nATTENTION: Already existing shared folders and configurations will be overwritten without confirmation!" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
								echo -e "${RED}[+] Cleaning...${NOCOLOR}"
								sleep 5
								echo -e "${RED}[+] Removing old Nginx configuration${NOCOLOR}"
								(sudo rm -r ${NGINX_DIR}/sites-available) 2> /dev/null
								(sudo rm -r ${NGINX_DIR}/sites-enabled) 2> /dev/null
								# shellcheck disable=SC2012
								TFS_NAME_LIST=$(ls lib/filesharing/pid/ | sed "s/.pid//")
								stopping_tfs $TFS_NAME_LIST
                echo -e "${RED}[+] Moving shared folders...${NOCOLOR}"
                FOLDER_LIST=$(sudo ls "restore.tbx${WEBSITE_DIR}")
                for FOLDER in $FOLDER_LIST; do
                  (sudo rm -r "${WEBSITE_DIR}/$FOLDER") 2> /dev/null
                  (sudo mv "restore.tbx${WEBSITE_DIR}/$FOLDER" "${WEBSITE_DIR}") 2> /dev/null
									(sudo chown torbox:torbox "$WEBSITE_DIR/$SERVICE_NAME") 2> /dev/null
                done
								# Remove the old TFS and webssh configuration in the run-file
								sudo sed -E -i "/^TFS-/d" "torbox/${RUNFILE}"
                sudo sed -E -i "/^TWEBSSH=/d" "torbox/${RUNFILE}"
								# Catch the TFS configuration from the backup
								TFS_CONFIG=$(grep -m 1 "^TFS-" "restore.tbx${RUNFILE}")
								WEBSSH_CONFIG=$(grep -m 1 "^TWEBSSH=" "restore.tbx${RUNFILE}")
								# Using the Anchor in torbox.run
								if [ ! -z "$TFS_CONFIG" ]; then
									echo -e "${RED}[+] Moving TFS configuration...${NOCOLOR}"
									# This is necessary to work with special characters in sed
									TFS_CONFIG_STRING="$(<<< "$TFS_CONFIG" sed -e 's`[][\\/.*^$]`\\&`g')"
									REPLACE_STRING=$(grep -m 1 "This will configure the TFS program" "torbox/${RUNFILE}")
									#This is necessary to work with special characters in sed
									REPLACE_STRING="$(<<< "$REPLACE_STRING" sed -e 's`[][\\/.*^$]`\\&`g')"
									sudo sed -E -i "s/# This will configure the TFS program.*/$REPLACE_STRING\n$TFS_CONFIG_STRING/g" "torbox/${RUNFILE}"
									echo -e "${RED}[+] Starting TFS...${NOCOLOR}"
									sudo ./run/start_tfs
								fi
								if [ ! -z "$WEBSSH_CONFIG" ]; then
									echo -e "${RED}[+] Moving webssh configuration...${NOCOLOR}"
									sudo sed -i "s/^TWEBSSH=.*/$WEBSSH_CONFIG/" ${RUNFILE}
								fi
              	echo -e "${RED}[+] Moving Nginx configuration...${NOCOLOR}"
                (sudo mv "restore.tbx${NGINX_DIR}/sites-available" "${NGINX_DIR}"/) 2> /dev/null
                (sudo mv "restore.tbx${NGINX_DIR}/sites-enabled" "${NGINX_DIR}"/) 2> /dev/null
								if grep "TWEBSSH=1" /home/torbox/torbox/run/torbox.run ; then
									[ ! -f /etc/nginx/sites-available/webssh.conf ] && sudo cp etc/nginx/sites-available/sample-webssh.conf /etc/nginx/sites-available/webssh.conf
									[ ! -L /etc/nginx/sites-enabled/webssh.conf ] && sudo ln -sf /etc/nginx/sites-available/webssh.conf /etc/nginx/sites-enabled/
									(nohup sudo /home/torbox/torbox/lib/webssh/twebssh --unix-socket=/var/run/webssh.sock &) 2>/dev/null
                  sudo rm nohup.out
                  clear
								fi
								echo -e "${RED}[+] Reloading Nginx to apply new configuration...${NOCOLOR}"
								sleep 5
								sudo systemctl reload nginx
              fi
            fi
            echo -e "${RED}[+] Cleaning...${NOCOLOR}"
            sudo rm -r restore.tbx
          else
            clear
            echo -e "${WHITE}[!] ABORT! NOT ENOUGH SPACE!${NOCOLOR}"
            echo " "
            read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
            clear
            trap "bash menu-onion; exit 0" EXIT
            exit 1
          fi
          cd torbox
          restarting_tor menu-onion
        else
          clear
          echo -e "${WHITE}[!] File not found or not specified!!"
          echo -e "${RED}[+]Did you enter the right filename with the right extension?${NOCOLOR}"
          sleep 2
        fi
        cd torbox
      fi
    fi
  ;;

esac
bash menu-onion
