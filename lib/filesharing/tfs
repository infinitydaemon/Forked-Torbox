#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import click
import subprocess
import sys
import os
import django
from django.core.management import call_command


# fmt: off
@click.command()
@click.option('--name', '-n',
							default=None,
							type=str,
							help="Onion Service Name")
@click.option('--onion-domain', '-od',
							default=None,
							type=str,
							help="Onion domain where TFS will be published")
@click.option('--file-path', '-fp',
							default=None,
							type=str,
							help="Path to save uploaded files")
@click.option('--allow-download', '-ad',
							default=True,
							type=bool,
							help="Allow download from file-path (Default: 1)")
@click.option('--allow-upload', '-au',
							default=True,
							type=bool,
							help="Allow upload to file-path (Default: 1)")
@click.option('--msg', '-m',
							default='',
							type=str,
							help="Message to show in header of web")
@click.option('--scan', '-s',
							is_flag=True,
							help="Scan for new files in file-path (Instance must be running without --dev flag).")
@click.option('--dev',
							default=False,
							type=bool,
							help="Run in development mode (Default: 0)")
# fmt: on
def main(name, onion_domain, file_path, allow_download, allow_upload, msg, scan, dev):
    if not name:
        click.echo("Error: You must specify a name.")
        click.echo(f"run {sys.argv[0]} --help for more info.")
        sys.exit(1)

    if not onion_domain:
        click.echo("Error: Onion domain is required")
        click.echo(f"run {sys.argv[0]} --help for more info.")
        sys.exit(1)

    instance_name = name
    os.environ["INSTANCE_NAME"] = instance_name
    os.environ["ONION_DOMAIN"] = onion_domain

    # Check if another instance running have same name
    from pathlib import Path

    base_dir = Path(__file__).resolve().parent
    if not scan:
        if os.path.exists(base_dir / f"pid/{instance_name}.pid"):
            click.echo(
                'Error: Another instance is already using name "%s"' % instance_name
            )
            sys.exit(1)

    if scan:
        """Scan will restart database and scan for files"""
        # Check if we have pid
        from pathlib import Path

        base_dir = Path(__file__).resolve().parent
        if os.path.exists(base_dir / f"pid/{instance_name}.pid"):
            # Restart database
            django.setup()
            restart_database()
            sys.exit(0)
        else:
            click.echo(f"Error: TFS is not running (pid is not present)")
            sys.exit(1)
    elif file_path is None:
        click.echo(f"Error: files-path must be set.")
        click.echo(f"run {sys.argv[0]} --help for more info.")
        sys.exit(1)

    media_root = file_path

    # Set environment vars for django settings
    os.environ["MEDIA_ROOT"] = media_root
    os.environ["ALLOW_UPLOAD"] = "1" if allow_upload else "0"
    os.environ["ALLOW_DOWNLOAD"] = "1" if allow_download else "0"
    os.environ["MSG_HEADER"] = msg
    os.environ["DEBUG"] = "1" if dev else "0"
    # os.environ['RUN_SCHEDULER'] = "1" if dev else "0"

    # Start django
    django.setup()

    # Import settings
    from django.conf import settings

    # Start db
    start_database(instance_name, settings.BASE_DIR)

    # Create root dir on db
    from apps.filesharing.models import DownloadFileModel

    root = DownloadFileModel(name=media_root, is_dir=True)
    root.save()

    if allow_download:
        # Scan media_root and add to db
        scan_path(media_root, root)

    run_webserver(instance_name, dev)


def scan_path(path, parent):
    """Recursive scan for files and directories"""
    from apps.filesharing.models import DownloadFileModel

    for p in os.scandir(path):
        if p.is_dir():
            # Create directory on db
            dir_db = DownloadFileModel(
                name=p.name, is_dir=True, parent=parent, path=p.path
            )
            dir_db.save()
            scan_path(p.path, dir_db)
        else:
            # Create file on db
            filename = p.name
            file_path = p.path
            file_size = os.path.getsize(file_path)
            file_django = file_path.replace(os.environ["MEDIA_ROOT"], "")
            file_db = DownloadFileModel(
                name=filename,
                size=file_size,
                parent=parent,
                file=file_django,
                path=p.path,
            )
            file_db.save()


def start_database(instance_name, BASE_DIR):
    """Remove old database and create new one"""
    try:
        os.remove(BASE_DIR / f"db/{instance_name}.sqlite3")
    except:
        pass

    call_command("migrate", interactive=False)


def restart_database():
    """Remove all records except root path, then scan for files"""
    # FIXME: check each file if exists don't remove
    from apps.filesharing.models import DownloadFileModel

    media_root = DownloadFileModel.objects.first()
    os.environ["MEDIA_ROOT"] = media_root.name
    for obj in DownloadFileModel.objects.all().exclude(pk=1):
        obj.delete()

    # Restart sequence
    from django.db import connection

    with connection.cursor() as cursor:
        table = DownloadFileModel.objects.model._meta.db_table
        sql = f"UPDATE SQLITE_SEQUENCE SET SEQ=1 WHERE NAME='{table}'"
        cursor.execute(sql)

    # Re-scan directory
    scan_path(media_root.name, media_root)


def run_webserver(instance_name, dev=True):
    # only run scheduler with webserver, not before
    os.environ["RUN_SCHEDULER"] = "True"
    if dev:
        # Dev
        from django.core.wsgi import get_wsgi_application

        application = get_wsgi_application()
        call_command("runserver", "--noreload")  # dev
        quit()
    else:
        # Production
        from django.conf import settings

        gunicorn_cmd = [
            "gunicorn",
            "-p",
            f"pid/{instance_name}.pid",
            "--chdir",
            settings.BASE_DIR,
            "-b",
            f"unix:/var/run/tfs_{instance_name}.sock",
            #'-b', f'unix:/tmp/tfs_{instance_name}.sock',
            "filesharing.wsgi",
            "--preload",
        ]
        subprocess.call(gunicorn_cmd)

        # Remove database at exit
        os.remove(settings.BASE_DIR / f"db/{instance_name}.sqlite3")

        # Remove pid file
        try:
            os.remove(settings.BASE_DIR / f"pid/{instance_name}.pid")
        except:
            pass


if __name__ == "__main__":
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "filesharing.settings")
    main()
