#!/bin/bash
# shellcheck disable=SC2001

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2022 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# The code in this script is an adaption from the incredible OnionJuggler project.
# Copyright (C) 2022 OnionJuggler developers
# Github: https://github.com/nyxnor/onionjuggler
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file manages the TorBox user's access to Onion Services with
# client access controls
#
# SYNTAX
# ./menu-access
#
#
###### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=6
#
# How many lines are only for decoration and spaces?
NO_SPACER=2
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_25=25
MENU_HEIGHT_20=20
# MENU_HEIGHT should not exceed 26
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Other variables
TORRC="/etc/tor/torrc"
TOR_USER="debian-tor"
DATA_DIR_ROOT="/var/lib"
DATA_DIR="${DATA_DIR_ROOT}/tor"
CLIENT_ONION_AUTH_DIR="${DATA_DIR}/onion_auth"

##############################
######## FUNCTIONS ########

# include lib
.  /home/torbox/torbox/lib/torbox.lib

# This function displays an error message and exit if the Onion domain is invalid
# Syntax error_onion_invalid <REASON>
# <REASON>: 1 -> it is not within base32 alphabet lower-case encoding
#           2 -> is different than 56 characters
error_onion_invalid()
{
	REASON=$1
	echo -e "${WHITE}[!] THE ONION DOMAIN IS INVALID!${NOCOLOR}"
	[ "$REASON" = "1" ] && echo -e "${RED}[+] The entered Onion domain is invalid, it is not within base32 alphabet lower-case encoding [a-z][2-7]${NOCOLOR}"
	[ "$REASON" = "2" ] && echo -e "${RED}[+] Onion domain is invalid, LENGTH=${#ONION_HOSTNAME_WITHOUT_ONION} is different than 56 characters (<56-char-base32>.onion)${NOCOLOR}"
	echo ""
	read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
	clear
	trap "bash menu-access; exit 0" EXIT
	exit 1
}

# This function displays an error message and exit if there is no client authorization files
# Syntax error_no_client_authorization
error_no_client_authorization()
{
	if [ -z "${SERVICE_NAME_LIST}" ]; then
		echo -e "${WHITE}[!] NO CLIENT AUTHORIZATION AVAILABLE!!${NOCOLOR}"
		echo ""
		read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
		clear
		trap "bash menu-access; exit 0" EXIT
		exit 1
	fi
}

# This function will generate a new key pair (public and private key) for an operator).
# As a client of an Onion Service, generate a key pair, from which you can give the public key to an Onion Operator.
# Syntax client_auth_on <ONION_HOSTNAME> [<CLIENT_PRIV_KEY>]
client_auth_on()
{
  ONION_HOSTNAME="${1}"
  CLIENT_PRIV_KEY="${2}"
	## removes protocol such as http(s)://, ssh:// and git:// from the front of the address and trailing / at the end of the onion to clean it and only show the hostname (address.onion)
	ONION_HOSTNAME="$(printf %s"${ONION_HOSTNAME}\n" | sed "s|.*://||" | sed "s|/$||")"
	ONION_HOSTNAME_WITHOUT_ONION="${ONION_HOSTNAME%.onion}"
	[ "${ONION_HOSTNAME_WITHOUT_ONION%%*[^a-z2-7]*}" ] || error_onion_invalid 1
	[ "${#ONION_HOSTNAME_WITHOUT_ONION}" = "56" ] || error_onion_invalid 2
	echo -e "${RED}[+] Activating client Onion Service authorization... ${SERVICE_NAME}...${NOCOLOR}"
	(sudo sed -i "s/^#ClientOnionAuthDir/ClientOnionAuthDir/g" ${TORRC}) 2> /dev/null
	[ -d "${CLIENT_ONION_AUTH_DIR}" ] || sudo -u "${TOR_USER}" mkdir -p "${CLIENT_ONION_AUTH_DIR}"
	if [ -z "${CLIENT_PRIV_KEY}" ]; then
		## Generate pem and derive pub and priv keys
		openssl genpkey -algorithm x25519 -out /tmp/k1.prv.pem
		grep -v "PRIVATE KEY" /tmp/k1.prv.pem | base64pem -d | tail --bytes=32 | base32 | sed 's/=//g' > /tmp/k1.prv.key
		openssl pkey -in /tmp/k1.prv.pem -pubout | grep -v "PUBLIC KEY" | base64pem -d | tail -c 32 | base32 | sed 's/=//g' > /tmp/k1.pub.key
		## save variables
		CLIENT_PUB_KEY=$(cat /tmp/k1.pub.key)
    CLIENT_PRIV_KEY=$(cat /tmp/k1.prv.key)
		CLIENT_PRIV_KEY_CONFIG="${ONION_HOSTNAME_WITHOUT_ONION}:descriptor:x25519:${CLIENT_PRIV_KEY}"
		CLIENT_PUB_KEY_CONFIG="descriptor:x25519:${CLIENT_PUB_KEY}"
		## Delete pem and keys
		sudo rm -f /tmp/k1.pub.key /tmp/k1.prv.key /tmp/k1.prv.pem
		# Client side configuration
		printf %s"${CLIENT_PRIV_KEY_CONFIG}\n" | sudo tee "${CLIENT_ONION_AUTH_DIR}/${ONION_HOSTNAME_WITHOUT_ONION}.auth_private" >/dev/null
		sudo chown debian-tor:debian-tor "${CLIENT_ONION_AUTH_DIR}/${ONION_HOSTNAME_WITHOUT_ONION}.auth_private"
		# Output
		echo -e "${WHITE}[!] Client side authorization is now configured!${NOCOLOR}"
		echo -e "${RED}[+] Below are the generated keys:${NOCOLOR}"
		echo ""
		echo -e "${WHITE}Service address                       = ${RED}${ONION_HOSTNAME}${NOCOLOR}"
		echo -e "${WHITE}Private key (saved)                   = ${RED}${CLIENT_PRIV_KEY}${NOCOLOR}"
		echo -e "${WHITE}Private key configuration             = ${RED}${CLIENT_PRIV_KEY_CONFIG}${NOCOLOR}"
		echo -e "${WHITE}Public key (for the service operator) = ${RED}${CLIENT_PUB_KEY}${NOCOLOR}"
		echo -e "${WHITE}Public key configuration              = ${RED}${CLIENT_PUB_KEY_CONFIG}${NOCOLOR}"
		echo ""
		echo -e "${NOCOLOR}Now it depends on the service operator to authorize your client public key"
		echo -e "${NOCOLOR}Send the public key to the onion service operator of ${WHITE}${ONION_HOSTNAME}${NOCOLOR} with following instruction:"
		printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
		printf "# Create a file with the client name (eg. alice) using the suffix '.auth' (eg. alice.auth) inside the folder\n"
		printf %s"# '<HiddenServiceDir>/authorized_clients/' where the service hostname is ${ONION_HOSTNAME}:\n\n"
		printf %s" printf '${CLIENT_PUB_KEY_CONFIG}' | sudo tee /var/lib/tor/hidden_service/authorized_clients/alice.auth\n\n"
		printf "# Reload tor:\n\n"
		printf " sudo chown -R debian-tor:debian-tor /var/lib/tor\n"
		printf " sudo systemctl restart tor\n"
		printf ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n"
		echo ""
		read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
  else
		# Client side configuration
		CLIENT_PRIV_KEY_CONFIG="${ONION_HOSTNAME_WITHOUT_ONION}:descriptor:x25519:${CLIENT_PRIV_KEY}"
		printf %s"${CLIENT_PRIV_KEY_CONFIG}\n" | sudo tee "${CLIENT_ONION_AUTH_DIR}/${ONION_HOSTNAME_WITHOUT_ONION}.auth_private" >/dev/null
		sudo chown debian-tor:debian-tor "${CLIENT_ONION_AUTH_DIR}/${ONION_HOSTNAME_WITHOUT_ONION}.auth_private"
		# Output
		echo -e "${WHITE}[!] Client side authorization is now configured!${NOCOLOR}"
		echo ""
		echo -e "${WHITE}Service address                       = ${RED}${ONION_HOSTNAME}${NOCOLOR}"
		echo -e "${WHITE}Private key (saved)                   = ${RED}${CLIENT_PRIV_KEY}${NOCOLOR}"
		echo -e "${WHITE}Private key configuration             = ${RED}${CLIENT_PRIV_KEY_CONFIG}${NOCOLOR}"
		echo ""
		echo -e "${NOCOLOR}As you inserted the private key manually, it ise expected that you have already sent/received the public key to/from the Onion Service operator."
		echo ""
		read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
  fi
	clear
	echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
	sudo systemctl restart tor
	echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
	sleep 2
}


###### DISPLAY THE MENU ######
clear

CHOICE=$(whiptail --cancel-button "Back" --title "TorBox v.0.5.1 - ACCESS CONTROL" --menu "Choose an option (ESC -> go back)" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
"==" "=============================================[Informational]===" \
" 1" "CLIENT AUTHORIZATION - READ ME FIRST"  \
"==" "==========================================[Manage my access]==="  \
" 2" "Generate a new key pair (public and private key) for an operator"  \
" 3" "Register an Onion Service with its private key"  \
" 4" "Edit a server access authorization"  \
" 5" "Remove a server access authorization"  \
" 6" "List all server access authorizations" 3>&1 1>&2 2>&3)

CHOICE=$(echo "$CHOICE" | tr -d ' ')
case "$CHOICE" in

  # Displays the read.me
	1)
    INPUT=$(cat text/help-onion_access_control-text)
    whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH
  ;;

	# Generate a new key pair (public and private key) for an operator
	# As a client of an Onion Service, generate a key pair, from which you can give the public key to an Onion Operator.
	2)
		INPUT=$(cat text/generate-new_key_pair_client_auth-text)
		if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
			ONION_HOSTNAME=$(whiptail --title \"TorBox - INFO\" --inputbox "\n\nEnter the Onion Domain of the service you want to authenticate as a client\n(e.g.: duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion):" $MENU_HEIGHT_20 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
			if [ -n "${ONION_HOSTNAME}" ]; then
				clear
				client_auth_on "${ONION_HOSTNAME}"
			fi
		fi
	;;

	# Register an Onion Service with its private key
	3)
		INPUT=$(cat text/register-client_private_key-text)
		if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
			ONION_HOSTNAME=$(whiptail --title "\"TorBox - INFO\"" --inputbox "\n\nEnter the Onion Domain of the service you want to authenticate as a client\n(e.g.: duckduckgogg42xjoc72x3sjasowoarfbgcmvfimaftt6twagswzczad.onion):" $MENU_HEIGHT_20 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
			CLIENT_PRIV_KEY=$(whiptail --title "\"TorBox - INFO\"" --inputbox "\n\nType in the client's private key (e.g: GBJWTYNY5OIQT4BSBP7OY4I7NSTLRDOZNMKSVXEXKGMWPUDPLJRA):" $MENU_HEIGHT_20 $MENU_WIDTH_REDUX 3>&1 1>&2 2>&3)
			if { [ -n "${ONION_HOSTNAME}" ] && [ -n "${CLIENT_PRIV_KEY}" ]; }; then
				clear
				client_auth_on "${ONION_HOSTNAME}" "${CLIENT_PRIV_KEY}"
			fi
		fi
	;;

	# Edit a Onion Service access authorization
	4)
		ONION_AUTH_LIST=$(sudo -u "${TOR_USER}" ls "${CLIENT_ONION_AUTH_DIR}"/ | cut -d "." -f1)
		[ -z $ONION_AUTH_LIST ] && error_no_client_authorization
		INPUT=$(cat text/edit_clients_authorisation-text)
		if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
			service_menu menu $ONION_AUTH_LIST "Choose an authorization of the Onion Service listed below to edit. (ESC -> go back)"
			# shellcheck disable=SC2154
			if [ "$exitstatus" == "0" ]; then
				i=0
				for ONION_AUTH in $ONION_AUTH_LIST; do
					i=$((i+1))
					for SERVICE_NUMBER in $ENTRY_NUMBERS; do
						if [ "$i" = "$SERVICE_NUMBER" ]; then sudo nano "${CLIENT_ONION_AUTH_DIR}/${ONION_AUTH}.auth_private"; fi
					done
				done
				clear
				echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
				sudo systemctl restart tor
				echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
				sleep 2
			fi
		fi
	;;

	#Remove a server access authorization
	5)
		ONION_AUTH_LIST=$(sudo -u "${TOR_USER}" ls "${CLIENT_ONION_AUTH_DIR}"/ | cut -d "." -f1)
		[ -z $ONION_AUTH_LIST ] && error_no_client_authorization
		INPUT=$(cat text/edit_clients_authorisation_2-text)
		if (whiptail --title "TorBox - INFO" --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
			service_menu checklist $ONION_AUTH_LIST "Choose the client authorization of the Onion Service(s) listed below to remove. (ESC -> go back)"
			# shellcheck disable=SC2154
			if [ "$exitstatus" == "0" ]; then
				i=0
				for ONION_AUTH in $ONION_AUTH_LIST; do
					i=$((i+1))
					for SERVICE_NUMBER in $ENTRY_NUMBERS; do
						if [ "$i" = "$SERVICE_NUMBER" ]; then
							echo -e "${RED}[+] Remove client authorization for $ONION_AUTH${NOCOLOR}"
							sudo rm -fv "${CLIENT_ONION_AUTH_DIR}/${ONION_AUTH}.auth_private"
						fi
					done
				done
				echo -e "${RED}[+] Restarting Tor!${NOCOLOR}"
				sudo systemctl restart tor
				echo -e "${RED}[+] Restarted Tor succesfully!${NOCOLOR}"
				sleep 2
			fi
		fi
  ;;

  # List all server access authorizations
  6)
		ONION_AUTH_LIST=$(sudo -u "${TOR_USER}" ls "${CLIENT_ONION_AUTH_DIR}"/ | cut -d "." -f1)
		[ -z $ONION_AUTH_LIST ] && error_no_client_authorization
		echo -e "${RED}[+] This are your authorizations as a client:${NOCOLOR}"
		echo ""
		for ONION_AUTH in $ONION_AUTH_LIST; do
			echo -e "${WHITE}Onion Service   = ${RED}${ONION_AUTH}.onion${NOCOLOR}"
			#printf %s"# Content:   $(sudo -u "${TOR_USER}" cat "${CLIENT_ONION_AUTH_DIR}"/"${AUTH}")"
			CONTENT=$(sudo grep "descriptor:x25519:" "${CLIENT_ONION_AUTH_DIR}/${ONION_AUTH}.auth_private")
			echo -e "${WHITE}Content   = ${RED}$CONTENT${NOCOLOR}"
		done
		echo ""
		read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
		clear
  ;;

  *)
    clear
    exit 0
esac
bash menu-access
