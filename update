#!/bin/bash
# shellcheck disable=SC2001

# This file is part of TorBox, an easy to use anonymizing router based on Raspberry Pi.
# Copyright (C) 2022 Patrick Truffer
# Contact: anonym@torbox.ch
# Website: https://www.torbox.ch
# Github:  https://github.com/radio24/TorBox
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it is useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# DESCRIPTION
# This file updates the base system of the TorBox and upgrades it to the latest stable tor release.
# It also offers some maintenance tools.
#
# SYNTAX
# screen bash update
#
#
##### SET VARIABLES ######
#
# SIZE OF THE MENU
#
# How many items do you have in the main menu?
NO_ITEMS=13
#
# How many lines are only for decoration and spaces?
NO_SPACER=2
#
#Set the the variables for the menu
MENU_WIDTH=80
MENU_WIDTH_REDUX=60
MENU_HEIGHT_15=15
MENU_HEIGHT_20=20
MENU_HEIGHT_25=25
MENU_HEIGHT=$((8+NO_ITEMS+NO_SPACER))
MENU_LIST_HEIGHT=$((NO_ITEMS+NO_SPACER))

#Colors
RED='\033[1;31m'
WHITE='\033[1;37m'
NOCOLOR='\033[0m'

#Identifying the hardware (see also https://gist.github.com/jperkin/c37a574379ef71e339361954be96be12)
if grep -q --text 'Raspberry Pi 4' /proc/device-tree/model ; then CHECK_HD3="Raspberry Pi 4" ; fi
if grep -q "Raspberry Pi 4" /proc/cpuinfo ; then CHECK_HD3="Raspberry Pi 4" ; fi

# Identify the Operation System
CHECK_OS="$(lsb_release -si)"

# Release Page of the unofficial Tor repositories on GitHub
TORURL="https://github.com/torproject/tor/tags"
TORPATH_TO_RELEASE_TAGS="/torproject/tor/releases/tag/"
#WARNING: Sometimes, GitHub will change this prefix!
#TOR_HREF_FOR_SED="href=\"/torproject/tor/releases/tag/tor-"
TOR_HREF_FOR_SED1="<h2 data-view-component=\"true\" class=\"f4 d-inline\"><a href=\"/torproject/tor/releases/tag/tor-"
TOR_HREF_FOR_SED2="\" data-view-component=.*"
# TORURL_DL_PARTIAL is the the partial download path of the tor release packages
# (highlighted with "-><-": ->https://github.com/torproject/tor/releases/tag/tor<- -0.4.6.6.tar.gz)
TORURL_DL_PARTIAL="https://github.com/torproject/tor/archive/refs/tags/tor"

# Read configuration from run/torbox.run
RUNFILE="run/torbox.run"
GO_VERSION=$(grep "^GO_VERSION=" ${RUNFILE} | sed "s/GO_VERSION=//g") 2> /dev/null
GO_VERSION_64=$(grep "^GO_VERSION_64=" ${RUNFILE} | sed "s/GO_VERSION_64=//g") 2> /dev/null
GO_DL_PATH=$(grep "^GO_DL_PATH=" ${RUNFILE} | sed "s/GO_DL_PATH=//g") 2> /dev/null
SNOWFLAKE_USED=$(grep "^SNOWFLAKE_USED=" ${RUNFILE} | sed "s/SNOWFLAKE_USED=//g") 2> /dev/null
TORBOXMENU_FORKNAME="radio24"
TORBOXMENU_BRANCHNAME="master"
TORBOXURL="https://github.com/$TORBOXMENU_FORKNAME/TorBox/archive/refs/heads/$TORBOXMENU_BRANCHNAME.zip"

#Other variables
RECOMPILE=0
i=0
n=0

##############################
######## FUNCTIONS ###########

# include lib
.  /home/torbox/torbox/lib/torbox.lib

# This function updates the firmware on a RPI4
# Syntax update_firmware
update_firmware()
{
  # A connection through tor is not necessary - <no_connection_warning> missing && <clearnet_warning> missing -> checks ONLY clearnet
  clear
  online_check
  if [ $OCHECK == 1 ]; then
    if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_on; fi
    trap "screen bash update; exit 0" SIGINT
    clear
    sudo apt-get install rpi-eeprom
    sleep 2
    clear
    echo -e "${RED}[!] Updating firmware if requiered...${NOCOLOR}"
    echo " "
    sudo rpi-eeprom-update
    echo " "
    read -n 1 -s -r -p "Press any key to continue or CTRL-C to leave"
    echo " "
    echo " "
    sudo rpi-eeprom-update -a
    echo " "
    echo -e "${WHITE}[+] DONE! ${NOCOLOR}"
    sleep 5
    if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_off; fi
  else
    echo -e "${WHITE}[!] SORRY! - TorBox is not connected with the Internet!${NOCOLOR}"
    echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
    echo " "
    sleep 5
  fi
}

# This function installs the packages in a controlled way, so that the correct
# installation can be checked.
# Syntax install_network_drivers <packagenames>
check_install_packages()
{
 packagenames=$1
 for packagename in $packagenames; do
	 clear
	 echo -e "${RED}[+] Installing all necessary packages....${NOCOLOR}"
	 echo ""
	 echo -e "${RED}[+] Installing ${WHITE}$packagename${NOCOLOR}"
	 echo ""
	 sudo apt-get -y install $packagename
#   echo ""
#   read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
 done
}

# This function prepares the tor update
# Syntax update_tor_preparations
# Used predefined variables: $torversion_versionsorted_new RED, WHITE, NOCOLOR, TORCONNECT, TORURL, TORPATH_TO_RELEASE_TAGS, TOR_HREF_FOR_SED1, TOR_HREF_FOR_SED2
# Provides the following variables: $torversion_versionsorted_new
update_tor_preparations()
{
  # Installation of developper packages - THIS PACKAGES ARE NECESARY FOR THE COMPILATION OF TOR!! Without them, tor will disconnect and restart every 5 minutes!!
	sudo apt-get -y update
	check_install_packages "build-essential automake libevent-dev libssl-dev asciidoc bc devscripts dh-apparmor libcap-dev liblzma-dev libsystemd-dev libzstd-dev quilt zlib1g-dev"
  clear
  echo -e "${RED}[+]         Fetching possible tor versions... ${NOCOLOR}"
  if [ $TORCONNECT -eq 0 ]; then
    readarray -t torversion_versionsorted < <(curl --silent $TORURL | grep $TORPATH_TO_RELEASE_TAGS | sed -e "s|$TOR_HREF_FOR_SED1||g" | sed -e "s|$TOR_HREF_FOR_SED2||g" | sed -e "s/<a//g" | sed -e "s/\">//g" | sed -e "s/ //g" | sort -r)
  else
    readarray -t torversion_versionsorted < <(curl -x socks5h://127.0.0.1:9050 --silent $TORURL | grep $TORPATH_TO_RELEASE_TAGS | sed -e "s|$TOR_HREF_FOR_SED1||g" | sed -e "s|$TOR_HREF_FOR_SED2||g" | sed -e "s/<a//g" | sed -e "s/\">//g" | sed -e "s/ //g" | sort -r)
  fi

  #How many tor version did we fetch?
	number_torversion=${#torversion_versionsorted[*]}
	if [ $number_torversion = 0 ]; then
		echo -e ""
		echo -e "${WHITE}[!] COULDN'T FIND ANY TOR VERSIONS${NOCOLOR}"
		echo -e "${RED}[+] The unofficial Tor repositories may be blocked or offline!${NOCOLOR}"
		echo -e "${RED}[+] Please try again later and if the problem persists, please report it${NOCOLOR}"
		echo -e "${RED}[+] to ${WHITE}anonym@torbox.ch${RED}. ${NOCOLOR}"
		echo ""
		echo -e "${RED}[+] However, an older version of tor is alredy installed from${NOCOLOR}"
		echo -e "${RED}    the Raspberry PI OS repository.${NOCOLOR}"
		echo ""
		read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
		clear
  else
    #We will build a new array with only the relevant tor versions
    i=0
    while [ $i -lt $number_torversion ]
    do
      if [ $n = 0 ]; then
        torversion_versionsorted_new[0]=${torversion_versionsorted[0]}
        covered_version_full=${torversion_versionsorted[0]}
        covered_version=$(cut -d '.' -f1-3 <<< ${torversion_versionsorted[0]})
        i=$((i+1))
        n=$((n+1))
      else
        actual_version_full=${torversion_versionsorted[$i]}
        actual_version=$(cut -d '.' -f1-3 <<< ${torversion_versionsorted[$i]})
        if [ "$actual_version" == "$covered_version" ]; then
          covered_version_work="$(<<< "$covered_version_full" sed -e 's/\.//g' | sed -e s/"\^{}\|\-[a-z].*$"//g)"
          actual_version_work="$(<<< "$actual_version_full" sed -e 's/\.//g' | sed -e s/"\^{}\|\-[a-z].*$"//g)"
          if [ $actual_version_work -le $covered_version_work ]; then i=$((i+1))
          else
            n=$((n-1))
            torversion_versionsorted_new[$n]=${torversion_versionsorted[$i]}
            covered_version_full=$actual_version_full
            covered_version=$actual_version
            i=$((i+1))
            n=$((n+1))
          fi
        else
          torversion_versionsorted_new[$n]=${torversion_versionsorted[$i]}
          covered_version_full=$actual_version_full
          covered_version=$actual_version
          i=$((i+1))
          n=$((n+1))
        fi
      fi
    done
    number_torversion=$n
  fi
}

# This function updates TOR to the latest stable version
# Syntax update_tor
# Used predefined variables: $torversion_versionsorted_new, RED, WHITE, NOCOLOR, TORURL, TORURL_DL_PARTIAL, TORCONNECT
update_tor()
{
  clear
  update_tor_preparations
  echo -e "${RED}[+] Selecting a tor version to install.${NOCOLOR}"
  i=0
  for (( i=0; i<number_torversion; i++ ))
  do
    if grep -v "-" <<< "${torversion_versionsorted_new[$i]}"; then
      version_string="$(<<< ${torversion_versionsorted_new[$i]} sed -e 's/ //g')"
      download_tor_url="$TORURL_DL_PARTIAL-$version_string.tar.gz"
      filename="tor-$version_string.tar.gz"
      i=$number_torversion
    fi
  done
  sleep 5
  KERNEL_VERS=$(uname -s -r)
  TOR_VERS=$(tor --version|head -n 1|rev|cut -c2-|rev|cut -d " " -f3)
  SOURCE_VERS_NUMBER=$version_string
  clear
  if [ "$SOURCE_VERS_NUMBER" == "$TOR_VERS" ] ; then
    INPUT="\nThis are the versions of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS (newest stable version!)\n\nThere is no new stable version of Tor around!\nWould you like to recompile Tor anyway?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
      RECOMPILE=1
    else
      RECOMPILE=0
    fi
  elif [ -z "$SOURCE_VERS_NUMBER" ] ; then
    INPUT="\nThis are the versions of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nHowever, something went wrong! I couldn't download the Tor package. You may try it later or manually !!"
    whiptail --title "TorBox - INFO" --msgbox "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX
    RECOMPILE=0
  else
    INPUT="\nThis are the versions of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nWould you like to change/update to Tor version $SOURCE_VERS_NUMBER?"
    if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
      RECOMPILE=1
    else
      RECOMPILE=0
    fi
  fi
  if [ $RECOMPILE = 1 ]; then
    clear
    echo ""
    echo -e "${RED}[+] Download the selected tor version...... ${NOCOLOR}"
    if [ -d ~/debian-packages ]; then sudo rm -r ~/debian-packages ; fi
    mkdir ~/debian-packages; cd ~/debian-packages
    if [ $TORCONNECT -eq 0 ]; then
			if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_on; fi
      wget $download_tor_url
      DLCHECK=$?
			if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_off; fi
    else
      # IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
      torsocks wget $download_tor_url
      DLCHECK=$?
    fi
    if [ $DLCHECK -eq 0 ]; then
      echo -e "${RED}[+] Sucessfully downloaded the selected tor version... ${NOCOLOR}"
      tar xzf $filename
		  echo ""
			cd "$(ls -d -- */)"
      echo -e "${RED}[+] Starting configuring, compiling and installing... ${NOCOLOR}"
			# Give it a touch of git (without these lines the compilation will break with a git error)
			git init
			git add -- *
			git config --global user.name "torbox"
			git config --global user.email "torbox@localhost"
			git commit -m "Initial commit"
			# Don't use ./autogen.sh
			sh autogen.sh
      ./configure
      make
      sudo make install
      #Return code for FINISHING / 1=finishing / 0=no finishing needed
      return 1
    else
      echo -e ""
      echo -e "${WHITE}[!] COULDN'T DOWNLOAD TOR!${NOCOLOR}"
      echo -e "${RED}[+] The unofficial Tor repositories may be blocked or offline!${NOCOLOR}"
      echo -e "${RED}[+] Please try again later and if the problem persists, please report it${NOCOLOR}"
      echo -e "${RED}[+] to ${WHITE}anonym@torbox.ch${RED}. ${NOCOLOR}"
      echo ""
      read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
      clear
      trap "screen bash update; exit 0" EXIT
      return 0
      exit 0
    fi
  else
    return 0
  fi
}

# With this function change/update of tor from a list of versions is possible
# Syntax select_and_install_tor
# Used predefined variables: $torversion_versionsorted_new, RED, WHITE, NOCOLOR, TORURL, TORURL_DL_PARTIAL
select_and_install_tor()
{
  clear
  update_tor_preparations
  #Display and chose a tor version
  clear
  echo -e "${WHITE}Choose a tor version (alpha versions are not recommended!):${NOCOLOR}"
  echo ""
  for (( i=0; i<number_torversion; i++ ))
  do
    menuitem=$((i+1))
    echo -e "${RED}$menuitem${NOCOLOR} - ${torversion_versionsorted_new[$i]}"
  done
  echo ""
  read -r -p $'\e[1;37mWhich tor version (number) would you like to use (0 = EXIT)? -> \e[0m'
  echo
  if [[ $REPLY =~ ^[1234567890]$ ]]; then
    if [ $REPLY -gt 0 ] && [ $((REPLY-1)) -le $number_torversion ]; then
      CHOICE_TOR=$((REPLY-1))
      clear
      echo -e "${RED}[+]         Download the selected tor version...... ${NOCOLOR}"
      version_string="$(<<< ${torversion_versionsorted_new[$CHOICE_TOR]} sed -e 's/ //g')"
      download_tor_url="$TORURL_DL_PARTIAL-$version_string.tar.gz"
      filename="tor-$version_string.tar.gz"
      if [ -d ~/debian-packages ]; then sudo rm -r ~/debian-packages ; fi
      mkdir ~/debian-packages; cd ~/debian-packages
      if [ $TORCONNECT -eq 0 ]; then
				if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_on; fi
        wget $download_tor_url
        DLCHECK=$?
				if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_off; fi
      else
        # IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
        torsocks wget $download_tor_url
        DLCHECK=$?
      fi
      clear
      if [ $DLCHECK -eq 0 ] ; then
        echo -e "${RED}[+] Sucessfully downloaded the selected tor version... ${NOCOLOR}"
        tar xzf $filename
        echo ""
        cd "$(ls -d -- */)"
        echo -e "${RED}[+] Starting configuring, compiling and installing... ${NOCOLOR}"
				# Give it a touch of git (without these lines the compilation will break with a git error)
				git init
				git add -- *
				git config --global user.name "torbox"
				git config --global user.email "torbox@localhost"
				git commit -m "Initial commit"
				# Don't use ./autogen.sh
        sh autogen.sh
        ./configure
        make
        sudo make install
        #Return code for FINISHING / 1=finishing / 0=no finishing needed
        return 1
      else
        echo -e ""
        echo -e "${WHITE}[!] COULDN'T DOWNLOAD TOR!${NOCOLOR}"
        echo -e "${RED}[+] The unofficial Tor repositories may be blocked or offline!${NOCOLOR}"
        echo -e "${RED}[+] Please try again later and if the problem persists, please report it${NOCOLOR}"
        echo -e "${RED}[+] to ${WHITE}anonym@torbox.ch${RED}. ${NOCOLOR}"
        echo ""
        read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
        trap "screen bash update; exit 0" SIGINT
        return 0
        exit 0
        clear
      fi
    else
      clear
      echo -e "${WHITE}[!] ABORTED OR WRONG SELECTION!${NOCOLOR}"
      echo -e "${RED}[+] Restart the installation and try again! ${NOCOLOR}"
      echo ""
      sleep 5
      trap "screen bash update; exit 0" SIGINT
      return 0
      exit 0
      clear
    fi
  else
    clear
    echo -e "${WHITE}[!] WRONG SELECTION!${NOCOLOR}"
    echo -e "${RED}[+] Restart the installation and try again! ${NOCOLOR}"
    echo ""
    sleep 5
    sleep 5
    return 0
    exit 0
    clear
  fi
}

#This function updates / resets TorBox's configuration files
update_torcfg()
{
  clear
  echo -e "${RED}[+] Copying TorBox's configuration files...${NOCOLOR}"
  echo ""
	# NEW v.0.5.1: shellinabox removed
  # Configuring Vanguards
  sudo cp etc/systemd/system/vanguards@default.service /etc/systemd/system/
  echo -e "${RED}[+]${NOCOLOR} Copied vanguards@default.service"
  (sudo cp /etc/default/hostapd /etc/default/hostapd.bak) 2> /dev/null
  sudo cp etc/default/hostapd /etc/default/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/default/hostapd -- backup done"
  (sudo cp /etc/default/isc-dhcp-server /etc/default/isc-dhcp-server.bak) 2> /dev/null
  sudo cp etc/default/isc-dhcp-server /etc/default/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/default/isc-dhcp-server -- backup done"
  (sudo cp /etc/dhcp/dhclient.conf /etc/dhcp/dhclient.conf.bak) 2> /dev/null
  sudo cp etc/dhcp/dhclient.conf /etc/dhcp/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/dhcp/dhclient.conf -- backup done"
  (sudo cp /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.bak) 2> /dev/null
  sudo cp etc/dhcp/dhcpd.conf /etc/dhcp/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/dhcp/dhcpd.conf -- backup done"
  (sudo cp /etc/hostapd/hostapd.conf /etc/hostapd/hostapd.conf.bak) 2> /dev/null
  sudo cp etc/hostapd/hostapd.conf /etc/hostapd/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/hostapd/hostapd.conf -- backup done"
  (sudo cp /etc/iptables.ipv4.nat /etc/iptables.ipv4.nat.bak) 2> /dev/null
  sudo cp etc/iptables.ipv4.nat /etc/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/iptables.ipv4.nat -- backup done"
  (sudo cp /etc/motd /etc/motd.bak) 2> /dev/null
  sudo cp etc/motd /etc/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/motd -- backup done"
  (sudo cp /etc/network/interfaces /etc/network/interfaces.bak) 2> /dev/null
  sudo cp etc/network/interfaces /etc/network/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/network/interfaces -- backup done"
  (sudo cp /etc/rc.local /etc/rc.local.bak) 2> /dev/null
  if [ "$CHECK_OS" == "Debian" ] || [ "$CHECK_OS" == "Ubuntu" ]; then
    sudo cp etc/rc.local.ubuntu /etc/rc.local
    sudo chmod a+x /etc/rc.local
  else
    sudo cp etc/rc.local /etc/
  fi
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/rc.local -- backup done"
  if [ "$CHECK_OS" == "Ubuntu" ]; then
    # Unlike the Raspberry Pi OS, Ubuntu uses systemd-resolved to resolve DNS queries (see also further below).
    # To work correctly in a captive portal environement, we have to set the following options in /etc/systemd/resolved.conf:
    # LLMNR=yes / MulticastDNS=yes / Chache=no
    (sudo cp /etc/systemd/resolved.conf /etc/systemd/resolved.conf.bak) 2> /dev/null
    sudo cp etc/systemd/resolved.conf /etc/systemd/
    echo -e "${RED}[+]${NOCOLOR}         Copied /etc/systemd/resolved.conf -- backup done"
  fi
  if grep -q "#net.ipv4.ip_forward=1" /etc/sysctl.conf ; then
    sudo cp /etc/sysctl.conf /etc/sysctl.conf.bak
    sudo sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/' /etc/sysctl.conf
    echo -e "${RED}[+]${NOCOLOR} Changed /etc/sysctl.conf -- backup done"
  fi
  (sudo cp /etc/tor/torrc /etc/tor/torrc.bak) 2> /dev/null
  sudo cp etc/tor/torrc /etc/tor/
	sudo chown -R debian-tor:debian-tor /etc/tor
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/tor/torrc -- backup done"
  echo -e "${RED}[+]${NOCOLOR} Activating IP forwarding"
  sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
  echo -e "${RED}[+]${NOCOLOR} Changing .profile if necessary"
  if ! grep "# Added by TorBox" ../.profile ; then
    sudo cp ../.profile ../.profile.bak
    sudo printf "\n# Added by TorBox\ncd torbox\n./menu\n" | sudo tee -a ../.profile
  fi
	(sudo cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak) 2> /dev/null
	sudo cp etc/nginx/nginx.conf /etc/nginx/
	echo -e "${RED}[+]${NOCOLOR}         Copied /etc/nginx/nginx.conf -- backup done"
	echo ""
	echo -e "${RED}[+]          Configure Nginx${NOCOLOR}"
	(sudo sed "s|STOP_SCHEDULE=\"${STOP_SCHEDULE:-QUIT/5/TERM/5/KILL/5}\"|STOP_SCHEDULE=\"${STOP_SCHEDULE:-TERM/5/KILL/5}\"/g" /etc/init.d/nginx)

  # This has to be at the end to avoid unnecessary error messages
  sudo hostnamectl set-hostname TorBox051
  (sudo cp /etc/hosts /etc/hosts.bak) 2> /dev/null
  sudo cp torbox/etc/hosts /etc/
  echo -e "${RED}[+]${NOCOLOR} Copied /etc/hosts -- backup done"
  echo ""
  echo -e "${WHITE}[+] FINISHED! TorBox's configuration files are now updated / reset! ${NOCOLOR}"
  sleep 5
}

# This function updates the TorBox menu
# Syntax update_torbox_menu <expert>
# <expert> -> 0 = default installation; 1 = expert installation
update_torbox_menu()
{
  clear
  EXPERT=$1
  if [ $EXPERT = 1 ]; then
    INPUT=$(whiptail --title "Update TorBox menu for experts" --inputbox "\n\nWhich TorBox menu branch do you like to install?\n\nType in the branch name exactly maching with GitHub (default = master):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX "master" 3>&1 1>&2 2>&3)
		exitstatus=$?
		# exitstatus = 255 means that the ESC key was pressed / exitstatus = 1 is cancelled
		if [ "$exitstatus" = "1" ] || [ "$exitstatus" = "255" ] ; then
			trap "screen bash update; exit 0" EXIT
			exit 1
		fi
    if [ ! -z "$INPUT" ]; then TORBOXMENU_BRANCHNAME=$INPUT; else TORBOXMENU_BRANCHNAME="master"; fi
		INPUT=$(whiptail --title "Update TorBox menu for experts" --inputbox "\n\nWhich TorBox menu fork do you like to install?\n\nType in the fork owner name exactly maching with GitHub (default = radio24):" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX "radio24" 3>&1 1>&2 2>&3)
		exitstatus=$?
		if [ "$exitstatus" = "1" ] || [ "$exitstatus" = "255" ] ; then
			trap "screen bash update; exit 0" EXIT
			exit 1
		fi
		if [ ! -z "$INPUT" ]; then TORBOXMENU_FORKNAME=$INPUT; else TORBOXMENU_FORKNAME=radio24; fi
  fi
	TORBOXURL="https://github.com/$TORBOXMENU_FORKNAME/TorBox/archive/refs/heads/$TORBOXMENU_BRANCHNAME.zip"
  clear
  echo -e "${RED}[!] Starting with the update...${NOCOLOR}"
  echo ""
  echo -e "${RED}[+] Reading configuration...${NOCOLOR}"
  # Save configuration
  RUNFILECONTENT=$(<${RUNFILE})
  sudo mv log_check_config.py ..
  # ======================
  cd
  echo -e "${RED}[+] Downloading TorBox menu from GitHub...${NOCOLOR}"
  if [ $TORCONNECT = 0 ]; then
		if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_on; fi
    wget $TORBOXURL
		if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_off; fi
  else
    # IMPORTANT: THIS WILL NOT WORK WITH A CAPTCHA!
    torsocks wget $TORBOXURL
  fi
  if [ -e $TORBOXMENU_BRANCHNAME.zip ]; then
    echo -e "${RED}[+] Unpacking TorBox menu...${NOCOLOR}"
    unzip $TORBOXMENU_BRANCHNAME.zip
    echo -e "${RED}[+] Removing the old one...${NOCOLOR}"
    sudo rm -r torbox/*
    echo -e "${RED}[+] Moving the new one...${NOCOLOR}"
    mv TorBox-$TORBOXMENU_BRANCHNAME/* torbox/
    echo -e "${RED}[+] Cleaning up...${NOCOLOR}"
    rm -r TorBox-$TORBOXMENU_BRANCHNAME
    rm -r $TORBOXMENU_BRANCHNAME.zip
    cd torbox
    echo -e "${RED}[+] Writing configuration...${NOCOLOR}"
    # Restore configuration
    (printf "%s" "$RUNFILECONTENT" > "${RUNFILE}") 2> /dev/null
    sudo mv ../log_check_config.py .
    # ======================
    echo -e "${RED} ${NOCOLOR}"
    echo -e "${WHITE}[+] SUCCESS! TorBox menu is now updated!${NOCOLOR}"
    sleep 5
  else
    echo -e "${RED} ${NOCOLOR}"
    echo -e "${WHITE}[!] FAILED!${NOCOLOR}"
    echo -e "${WHITE}[!] Downloading TorBox menu from GitHub has failed !!${NOCOLOR}"
    echo -e "${WHITE}[!] I can't update TorBox menu !!${NOCOLOR}"
    echo -e "${WHITE}[!] You may try it later or manually !!${NOCOLOR}"
    sleep 5
  fi
}

###### DISPLAY THE MAIN MENU ######
CHOICE=$(whiptail --nocancel --title "TorBox v.0.5.1 - UPDATE & MAINTENANCE MENU" --menu "Choose an option (ESC -> command prompt)" $MENU_HEIGHT $MENU_WIDTH $MENU_LIST_HEIGHT \
"===" "==================================================[Updates]===" \
" 1" "Update the base system (reboot recommended!)" \
" 2" "Update additional network drivers (reboot required!)" \
" 3" "Update the firmware of the RPI 4 (reboot required!)"  \
" 4" "Update or change the version of Tor" \
" 5" "Update the TorBox menu (whitout touching the configuration)"  \
"===" "==============================================[Maintenance]===" \
" 6" "Reset TorBox's configuration files (dangerous!)" \
" 7" "Reset TWM and erase all wifi passwords (reboot required!)" \
" 8" "Reset Tor and force a change of the permanent entry node" \
" 9" "Restart Nginx, webssh and TFS" \
"10" "Force to deactivate the OBFS4 mode" \
"11" "Rerun the \"First Start-up\" script" \
"12" "Erase all log files" \
"13" "Just fixing and cleaning" \
3>&1 1>&2 2>&3)

CHOICE=$(echo "$CHOICE" | tr -d ' ')
case "$CHOICE" in

	#This updates the base system (done through clearnet because this is not sensitive)
	1)
		clear
		whiptail --title "TorBox - INFO" --textbox text/update-text $MENU_HEIGHT_25 $MENU_WIDTH
		clear
		KERNEL_VERS=$(uname -s -r)
		TOR_VERS=$(tor --version|head -n 1|rev|cut -c2-|rev|cut -d " " -f3)
		INPUT="\nThis is the version of your current base system:\nKernel: $KERNEL_VERS\nTor:    $TOR_VERS\n\nWould you like to update the base system to the newest version?"
		if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH_REDUX); then
			clear
			# A connection through tor is not necessary - <no_connection_warning> missing && <clearnet_warning> missing -> checks ONLY clearnet
			online_check
			if [ $OCHECK == 0 ]; then
				clear
				echo -e "${WHITE}[!] SORRY! - TorBox is not connected with the Internet!${NOCOLOR}"
				echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
				echo " "
				read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
				trap "screen bash update; exit 0" EXIT
				exit 1
			fi
      if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_on; fi
			clear
			echo -e "${RED}[+] Updating the base system..."
			sudo apt-get -y update
			sudo apt-get -y dist-upgrade
			sleep 10
			clear
			echo -e "${RED}[+] Updating the Python modules...${NOCOLOR}"
			echo ""
			sudo pip3 install --upgrade pytesseract
			sudo pip3 install --upgrade mechanize==0.4.7
			sudo pip3 install --upgrade PySocks
			sudo pip3 install --upgrade urwid
			sudo pip3 install --upgrade Pillow
			sudo pip3 install --upgrade requests
			sudo pip3 install --upgrade Django
			sudo pip3 install --upgrade click
			sudo pip3 install --upgrade gunicorn
			# NEW v.0.5.1
			sudo pip3 install --upgrade paramiko
			sudo pip3 install --upgrade tornado
			sudo pip3 install --upgrade APScheduler
			sudo pip3 install --upgrade backports.zoneinfo
			sudo pip3 install --upgrade eventlet
			sudo pip3 install --upgrade python-socketio
			sleep 10
			clear
			echo -e "${RED}[+] Re-installing ${WHITE}go${NOCOLOR}"
			echo ""
			if uname -m | grep -q -E "arm64|aarch64"; then
			  wget $GO_DL_PATH$GO_VERSION_64
			  DLCHECK=$?
			  if [ $DLCHECK -eq 0 ] ; then
			  	sudo tar -C /usr/local -xzvf $GO_VERSION_64
			  	if ! grep "# Added by TorBox (001)" .profile ; then
			  		sudo printf "\n# Added by TorBox (001)\nexport PATH=$PATH:/usr/local/go/bin\n" | sudo tee -a .profile
						export PATH=$PATH:/usr/local/go/bin
			  	fi
			  	sudo rm $GO_VERSION_64
			  else
			  	echo ""
			  	echo -e "${WHITE}[!] COULDN'T DOWNLOAD GO (arm64)!${NOCOLOR}"
			  	echo -e "${RED}[+] The Go repositories may be blocked or offline!${NOCOLOR}"
			  	echo -e "${RED}[+] Please try again later and if the problem persists, please report it${NOCOLOR}"
			  	echo -e "${RED}[+] to ${WHITE}anonym@torbox.ch${RED}. ${NOCOLOR}"
			  	echo ""
			  	read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
			  fi
			else
			  wget $GO_DL_PATH$GO_VERSION
			  DLCHECK=$?
			  if [ $DLCHECK -eq 0 ] ; then
			  	sudo tar -C /usr/local -xzvf $GO_VERSION
			  	if ! grep "# Added by TorBox (001)" .profile ; then
			  		sudo printf "\n# Added by TorBox (001)\nexport PATH=$PATH:/usr/local/go/bin\n" | sudo tee -a .profile
						export PATH=$PATH:/usr/local/go/bin
			  	fi
			  	sudo rm $GO_VERSION
			  else
			  	echo ""
			  	echo -e "${WHITE}[!] COULDN'T DOWNLOAD GO!${NOCOLOR}"
			  	echo -e "${RED}[+] The Go repositories may be blocked or offline!${NOCOLOR}"
			  	echo -e "${RED}[+] Please try again later and if the problem persists, please report it${NOCOLOR}"
			  	echo -e "${RED}[+] to ${WHITE}anonym@torbox.ch${RED}. ${NOCOLOR}"
			  	echo ""
			  	read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
			  fi
			fi
			sleep 10
			clear
			echo -e "${RED}[+] Configure the system services...${NOCOLOR}"
			sudo systemctl unmask hostapd
			sudo systemctl enable hostapd
			sudo systemctl enable isc-dhcp-server
			echo -e "${RED}[+] Configuring Tor with its pluggable transports....${NOCOLOR}"
			# Copy not moving!
			sudo cp /usr/share/tor/geoip* /usr/bin
			sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
			sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
			sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
			sudo systemctl enable tor
			sudo systemctl daemon-reload
      if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_off; fi
      echo ""
			echo -e "${WHITE}[+] FINISHED! TorBox's base system is now updated!${NOCOLOR}"
			echo " "
			read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
			recommended_reboot update
		fi
	;;

	# This updates additional network drivers (done through clearnet because this is not sensitive)
	2)
    clear
		INPUT=$(cat text/install_network_drivers-text)
		if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT $MENU_WIDTH); then
			clear
			# A connection through tor is not necessary - <no_connection_warning> missing && <clearnet_warning> missing -> checks ONLY clearnet
			online_check
			if [ $OCHECK == 0 ]; then
				clear
				echo -e "${WHITE}[!] SORRY! - TorBox is not connected with the Internet!${NOCOLOR}"
				echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
				echo " "
				read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
				trap "screen bash update; exit 0" EXIT
				exit 1
			fi
      if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_on; fi
			bash install_network_drivers
      if [ "$TOR_DNS" == "0" ]; then local_clearnet_dns_resolution_off; fi
			recommended_reboot update
		fi
	;;

	# This updates the firmware on a RPI4 (done through clearnet because this is not sensitive)
	3)
		clear
    if [ ! -z "$CHECK_HD3" ]; then
    	INPUT=$(cat text/firmware_update-text)
      if (whiptail --defaultno --yesno "$INPUT" 16 $MENU_WIDTH); then
        clear
        update_firmware
				recommended_reboot update
      fi
    else
      clear
      echo -e "${WHITE}[!] ATTENTION! Updating the firmware is only supported by the RPI4!${NOCOLOR}"
      echo -e "${WHITE}[!] The used hardware was not identified as a RPI4, why we don't try ${NOCOLOR}"
      echo -e "${WHITE}[!] to update the firmware. ${NOCOLOR}"
      sleep 10
    fi
	;;

	# This changes/updates the installed Tor version
	4)
    clear
    INPUT=$(cat text/update-tor-text)
    if (whiptail --title "TorBox - INFO (scroll down!)" --scrolltext --defaultno --no-button "DEFAULT" --yes-button "EXPERT" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      exitstatus=$?
      EXPERT=1
    else
      exitstatus=$?
      EXPERT=0
    fi
		# exitstatus == 255 means that the ESC key was pressed
		if [ $exitstatus != 255 ]; then
      clear
      # Avoid cheap censorship mechanisms
      online_check $TORURL 1 1
      # We can only use Clearnet if allowed!
      if [ $TORCONNECT = 0 ] && [ $CLEARNET_DECISSION = 0 ]; then
        clear
        echo -e "${WHITE}[!] SORRY! - currently, TorBox cannot use tor and is not allowed${NOCOLOR}"
        echo -e "${WHITE}    to use clearnet!${NOCOLOR}"
        echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
        echo " "
        read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
        trap "screen bash update; exit 0" EXIT
        exit 1
      fi
      if [ $OCHECK == 0 ]; then
        clear
        echo -e "${WHITE}[!] SORRY! - TorBox is not connected with the Internet!${NOCOLOR}"
        echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
        echo " "
        read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
        trap "screen bash update; exit 0" EXIT
        exit 1
      fi
      if [ $EXPERT == 1 ]; then
        select_and_install_tor
        FINISHING=$?
      else
        update_tor
        FINISHING=$?
      fi
      # Finishing
      cd ~/torbox
      if [ -d ~/debian-packages ] ; then sudo rm -r ~/debian-packages ; fi
      if [ $FINISHING = 1 ] ; then
				echo -e "${RED}[+] Configuring Tor with its pluggable transports....${NOCOLOR}"
        (sudo mv /usr/local/bin/tor* /usr/bin) 2> /dev/null
        # Copy not moving!
        (sudo cp /usr/share/tor/geoip* /usr/bin) 2> /dev/null
        sudo chmod a+x /usr/bin/geoip*
        sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
        sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
        sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
				echo ""
				echo -e "${RED}[+] Re-installing Snowflake...${NOCOLOR}"
				cd ~
				git clone $SNOWFLAKE_USED
				DLCHECK=$?
				if [ $DLCHECK -eq 0 ]; then
					sleep 1
				else
					echo ""
					echo -e "${WHITE}[!] COULDN'T CLONE THE SNOWFLAKE REPOSITORY!${NOCOLOR}"
					echo -e "${RED}[+] The Snowflake repository may be blocked or offline!${NOCOLOR}"
					echo -e "${RED}[+] Please try again later and if the problem persists, please report it${NOCOLOR}"
					echo -e "${RED}[+] to ${WHITE}anonym@torbox.ch${RED}. ${NOCOLOR}"
					echo ""
					read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
					clear
				fi
				export GO111MODULE="on"
				cd ~/snowflake/proxy
				go get
				go build
				sudo cp proxy /usr/bin/snowflake-proxy
				cd ~/snowflake/client
				go get
				go build
				sudo cp client /usr/bin/snowflake-client
				cd ~
				sudo rm -rf snowflake
				sudo rm -rf go*
				echo -e "${RED}[+] Configure the system services...${NOCOLOR}"
        sudo systemctl stop tor
        sudo systemctl enable tor
        sudo systemctl daemon-reload
        sudo systemctl start tor
        TOR_VERS=""
        TOR_VERS=$(tor --version|head -n 1|rev|cut -c2-|rev|cut -d " " -f3)
        echo ""
        echo -e "${WHITE}[+] FINISHED! Installed Tor version: $TOR_VERS${NOCOLOR}"
        read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
      fi
    fi
	;;

	# Update the TorBox menu (whitout touching the configuration)
	5)
		clear
    INPUT=$(cat text/torbox_update-text)
    if (whiptail --title "TorBox - INFO" --defaultno --no-button "DEFAULT" --yes-button "EXPERT" --yesno "$INPUT" $MENU_HEIGHT_25 $MENU_WIDTH); then
      exitstatus=$?
      EXPERT=1
    else
      exitstatus=$?
      EXPERT=0
    fi
		# exitstatus == 255 means that the ESC key was pressed
		if [ $exitstatus != 255 ]; then
      clear
      online_check $TORBOXURL 1 1
      # We can only use Clearnet if allowed!
      if [ $TORCONNECT = 0 ] && [ $CLEARNET_DECISSION = 0 ]; then
        clear
        echo -e "${WHITE}[!] SORRY! - currently, TorBox cannot use tor and is not allowed${NOCOLOR}"
        echo -e "${WHITE}    to use clearnet!${NOCOLOR}"
        echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
        echo " "
        read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
        trap "screen bash update; exit 0" EXIT
        exit 1
      fi
      if [ $OCHECK == 0 ]; then
        clear
        echo -e "${WHITE}[!] SORRY! - TorBox is not connected with the Internet!${NOCOLOR}"
        echo -e "${RED}[+] For that reason, we cannot execute this function :(${NOCOLOR}"
        echo " "
        read -n 1 -s -r -p $'\e[1;31mPlease press any key to continue... \e[0m'
        trap "screen bash update; exit 0" EXIT
        exit 1
      fi
      update_torbox_menu $EXPERT
    fi
    exit 0
	;;

	# Reset TorBox's configuration files (dangerous!)
	6)
		clear
    INPUT=$(cat text/torboxcfg_update-text)
	  if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
	  	clear
	    update_torcfg
			recommended_reboot update
    fi
	;;

	# Erase all passwords in Torbox Wireless Manager
	7)
		clear
  	INPUT=$(cat text/erase_TWM_pwd-text)
	  if (whiptail --defaultno --yesno "$INPUT" $MENU_HEIGHT_15 $MENU_WIDTH); then
	  	clear
	    echo -e "${RED}[+] Erasing all passwords in the Torbox Wireless Manager...${NOCOLOR}"
	    (sudo rm /etc/wpa_supplicant/wpa_supplicant-wlan0.conf) 2> /dev/null
	    (sudo rm /etc/wpa_supplicant/wpa_supplicant-wlan1.conf) 2> /dev/null
	    sleep 2
	    echo -e "${WHITE}[+] FINISHED!${NOCOLOR}"
			sleep 2
			recommended_reboot update
		fi
	;;

	#This resets Tor and forces a change of the permanent entry node
	8)
		clear
    INPUT=$(cat text/tor-reset-text)
    if (whiptail --title "TorBox - INFO" --defaultno  --yesno "$INPUT" $MENU_HEIGHT_20 $MENU_WIDTH); then
      clear
      echo -e "${RED}[+] Stopping Tor...${NOCOLOR}"
      sudo systemctl stop tor
      sleep 2
		  echo -e "${RED}[+] Deleting all circuits and forcing a change of the permanent entry node${NOCOLOR}"
		  (sudo rm -r /var/lib/tor/cached-certs) 2> /dev/null
		  (sudo rm -r /var/lib/tor/cached-consensus) 2> /dev/null
		  (sudo rm -r /var/lib/tor/cached-descriptors) 2> /dev/null
		  (sudo rm -r /var/lib/tor/cached-descriptors.new) 2> /dev/null
		  (sudo rm -r /var/lib/tor/cached-microdesc-consensus) 2> /dev/null
		  (sudo rm -r /var/lib/tor/cached-microdescs) 2> /dev/null
		  (sudo rm -r /var/lib/tor/cached-microdescs.new) 2> /dev/null
		  (sudo rm -r /var/lib/tor/diff-cache) 2> /dev/null
		  (sudo rm -r /var/lib/tor/lock) 2> /dev/null
		  (sudo rm -r /var/lib/tor/state) 2> /dev/null
		  sleep 2
		  echo -e "${RED}[+] Resetting Tor statistics...${NOCOLOR}"
		  (sudo rm /var/log/tor/notices.log) 2> /dev/null
		  (sudo -u debian-tor touch /var/log/tor/notices.log) 2> /dev/null
			(sudo chmod -R go-rwx /var/log/tor/notices.log) 2> /dev/null
		  echo -e "${RED}[+] Done!${NOCOLOR}"
		  sleep 4
		  restarting_tor update
	  fi
	;;

	# NEW v.0.5.1
	# Restart nginx, webssh and TFS
	9)
		clear
		# shellcheck disable=SC2012
		TFS_NAME_LIST=$(ls lib/filesharing/pid/ | sed "s/.pid//")
		if [ ! -z "$TFS_NAME_LIST" ]; then
			for TFS_NAME in $TFS_NAME_LIST; do
				echo -e "${RED}[+] Stopping TFS named ${WHITE}${TFS_NAME}${RED} on Onion domain...${NOCOLOR}"
				PID=$(cat lib/filesharing/pid/${TFS_NAME}.pid)
				(sudo kill $PID) &>/dev/null
			done
			echo ""
		fi
    sleep 5
		echo -e "${RED}[+] Resetting ownership rights...${NOCOLOR}"
		(sudo chown torbox:torbox /var/www) 2> /dev/null
		if grep "TWEBSSH=1" /home/torbox/torbox/run/torbox.run ; then
			echo -e "${RED}[+] Configure webssh...${NOCOLOR}"
			[ ! -f /etc/nginx/sites-available/webssh.conf ] && sudo cp etc/nginx/sites-available/sample-webssh.conf /etc/nginx/sites-available/webssh.conf
			[ ! -L /etc/nginx/sites-enabled/webssh.conf ] && sudo ln -sf /etc/nginx/sites-available/webssh.conf /etc/nginx/sites-enabled/
			PID=$(pgrep -f "twebssh")
			[ -z $PID ] && (nohup sudo /home/torbox/torbox/lib/webssh/twebssh --unix-socket=/var/run/webssh.sock &) 2>/dev/null
		fi
		echo -e "${RED}[+] Starting TFS again and reload Nginx...${NOCOLOR}"
		sudo ./run/start_tfs
		sudo rm nohup.out
		echo ""
		echo -e "${RED}[+] Done!${NOCOLOR}"
		sleep 5
	;;

	#Force to deactivate the OBFS4 mode
	#HAS TO BE REMOVED WITH TORBOX051
	10)
  	deactivate_obfs4_bridges
		clear
	;;

	# Rerun the "fFirst Start-up" script
	11)
  	clear
		./first_use 3
	;;

	# This erases all log files
	12)
  	clear
    erase_logs
    echo ""
    echo -e "${WHITE}[+] FINISHED! All log files erased!${NOCOLOR}"
    sleep 5
	;;

	# Fixing and cleaning - just to be sure that all works properly.
	13)
		clear
		# NEW v.0.5.1: new go versions
		local_clearnet_dns_resolution_on
		sleep 2
  	check_interface_with_internet
  	clear
  	if [ $CONNECTED == 1 ]; then
    	echo -e "${RED}[+] Set the correct time...${NOCOLOR}"
    	sudo /usr/sbin/ntpdate pool.ntp.org
    	sleep 3
    	echo " "
  	fi
  	echo -e "${RED}[+] Fixing and cleaning...${NOCOLOR}"
  	sudo apt --fix-broken install
  	sudo apt-get -y clean; sudo apt-get -y autoclean; sudo apt-get -y autoremove
  	sudo setcap 'cap_net_bind_service=+ep' /usr/bin/obfs4proxy
  	sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@default.service
  	sudo sed -i "s/^NoNewPrivileges=yes/NoNewPrivileges=no/g" /lib/systemd/system/tor@.service
  	sudo systemctl daemon-reload
  	sleep 3
		local_clearnet_dns_resolution_off
	;;

	*)
		clear
		exit 0
esac
bash update
